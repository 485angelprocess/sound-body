$comment Generated by Amaranth $end
$date 2025-07-27 14:34:12.324163 $end
$timescale 1 fs $end
$scope module bench $end
$scope module top $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # prog__ack $end
$var wire 1 $ bus__ack $end
$var wire 32 % bus__addr $end
$var wire 32 & prog__addr $end
$var wire 1 ' bus__cyc $end
$var wire 1 ( prog__cyc $end
$var wire 32 ) prog__r_data $end
$var wire 32 * bus__r_data $end
$var wire 1 + bus__stb $end
$var wire 1 , prog__stb $end
$var wire 32 - bus__w_data $end
$var wire 32 . prog__w_data $end
$var wire 1 / bus__w_en $end
$var wire 1 0 prog__w_en $end
$scope module cpu $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # prog__ack $end
$var wire 32 & prog__addr $end
$var wire 1 ( prog__cyc $end
$var wire 32 ) prog__r_data $end
$var wire 1 , prog__stb $end
$var wire 118 1 consume__data $end
$var wire 32 2 \consume__data.pc $end
$var string 1 3 \consume__data.op $end
$var wire 79 4 \consume__data.mode $end
$var wire 79 5 \consume__data.mode.arith $end
$var wire 3 6 \consume__data.mode.arith.f $end
$var wire 7 7 \consume__data.mode.arith.m $end
$var wire 32 8 \consume__data.mode.arith.s1 $end
$var wire 32 9 \consume__data.mode.arith.s2 $end
$var wire 5 : \consume__data.mode.arith.d $end
$var wire 59 ; \consume__data.mode.imm $end
$var wire 3 < \consume__data.mode.imm.f $end
$var wire 7 = \consume__data.mode.imm.m $end
$var wire 32 > \consume__data.mode.imm.s $end
$var wire 12 ? \consume__data.mode.imm.i $end
$var wire 5 @ \consume__data.mode.imm.d $end
$var wire 79 A \consume__data.mode.store $end
$var wire 3 B \consume__data.mode.store.f $end
$var wire 12 C \consume__data.mode.store.offset $end
$var wire 32 D \consume__data.mode.store.s1 $end
$var wire 32 E \consume__data.mode.store.s2 $end
$var wire 37 F \consume__data.mode.upper $end
$var wire 5 G \consume__data.mode.upper.d $end
$var wire 32 H \consume__data.mode.upper.i $end
$var wire 26 I \consume__data.mode.jump $end
$var wire 5 J \consume__data.mode.jump.d $end
$var wire 21 K \consume__data.mode.jump.offset $end
$var wire 118 L produce__data $end
$var wire 32 M \produce__data.pc $end
$var string 1 N \produce__data.op $end
$var wire 79 O \produce__data.mode $end
$var wire 79 P \produce__data.mode.arith $end
$var wire 3 Q \produce__data.mode.arith.f $end
$var wire 7 R \produce__data.mode.arith.m $end
$var wire 32 S \produce__data.mode.arith.s1 $end
$var wire 32 T \produce__data.mode.arith.s2 $end
$var wire 5 U \produce__data.mode.arith.d $end
$var wire 59 V \produce__data.mode.imm $end
$var wire 3 W \produce__data.mode.imm.f $end
$var wire 7 X \produce__data.mode.imm.m $end
$var wire 32 Y \produce__data.mode.imm.s $end
$var wire 12 Z \produce__data.mode.imm.i $end
$var wire 5 [ \produce__data.mode.imm.d $end
$var wire 79 \ \produce__data.mode.store $end
$var wire 3 ] \produce__data.mode.store.f $end
$var wire 12 ^ \produce__data.mode.store.offset $end
$var wire 32 _ \produce__data.mode.store.s1 $end
$var wire 32 ` \produce__data.mode.store.s2 $end
$var wire 37 a \produce__data.mode.upper $end
$var wire 5 b \produce__data.mode.upper.d $end
$var wire 32 c \produce__data.mode.upper.i $end
$var wire 26 d \produce__data.mode.jump $end
$var wire 5 e \produce__data.mode.jump.d $end
$var wire 21 f \produce__data.mode.jump.offset $end
$var wire 1 g produce__ready $end
$var wire 1 h consume__ready $end
$var wire 1 i consume__valid $end
$var wire 1 j produce__valid $end
$var wire 32 k pc $end
$var wire 1 l consume__ready$9 $end
$var wire 1 m prog_enable $end
$var wire 1 n latch $end
$var wire 64 o consume__data$13 $end
$var wire 32 p \consume__data$13.pc $end
$var string 1 q \consume__data$13.op $end
$var wire 25 r \consume__data$13.mode $end
$var wire 25 s \consume__data$13.mode.r $end
$var wire 5 t \consume__data$13.mode.r.rd $end
$var wire 3 u \consume__data$13.mode.r.f_lower $end
$var wire 5 v \consume__data$13.mode.r.rs1 $end
$var wire 5 w \consume__data$13.mode.r.rs2 $end
$var wire 7 x \consume__data$13.mode.r.f_upper $end
$var wire 25 y \consume__data$13.mode.i $end
$var wire 5 z \consume__data$13.mode.i.rd $end
$var wire 3 { \consume__data$13.mode.i.f $end
$var wire 5 | \consume__data$13.mode.i.rs $end
$var wire 12 } \consume__data$13.mode.i.imm $end
$var wire 25 ~ \consume__data$13.mode.u $end
$var wire 5 !! \consume__data$13.mode.u.rd $end
$var wire 20 "! \consume__data$13.mode.u.imm $end
$var wire 25 #! \consume__data$13.mode.s $end
$var wire 5 $! \consume__data$13.mode.s.imm_lower $end
$var wire 3 %! \consume__data$13.mode.s.f $end
$var wire 5 &! \consume__data$13.mode.s.rs1 $end
$var wire 5 '! \consume__data$13.mode.s.rs2 $end
$var wire 7 (! \consume__data$13.mode.s.imm_upper $end
$var wire 25 )! \consume__data$13.mode.j $end
$var wire 5 *! \consume__data$13.mode.j.rd $end
$var wire 20 +! \consume__data$13.mode.j.offset $end
$var wire 25 ,! \consume__data$13.mode.b $end
$var wire 5 -! \consume__data$13.mode.b.offset_lower $end
$var wire 3 .! \consume__data$13.mode.b.f $end
$var wire 5 /! \consume__data$13.mode.b.rs1 $end
$var wire 5 0! \consume__data$13.mode.b.rs2 $end
$var wire 7 1! \consume__data$13.mode.b.offset_upper $end
$var wire 25 2! \consume__data$13.mode.m $end
$var wire 5 3! \consume__data$13.mode.m.rd $end
$var wire 3 4! \consume__data$13.mode.m.f $end
$var wire 5 5! \consume__data$13.mode.m.rs1 $end
$var wire 5 6! \consume__data$13.mode.m.rs2 $end
$var wire 7 7! \consume__data$13.mode.m.muldiv $end
$var wire 1 8! consume__valid$15 $end
$var wire 118 9! produce__data$17 $end
$var wire 32 :! \produce__data$17.pc $end
$var string 1 ;! \produce__data$17.op $end
$var wire 79 <! \produce__data$17.mode $end
$var wire 79 =! \produce__data$17.mode.arith $end
$var wire 3 >! \produce__data$17.mode.arith.f $end
$var wire 7 ?! \produce__data$17.mode.arith.m $end
$var wire 32 @! \produce__data$17.mode.arith.s1 $end
$var wire 32 A! \produce__data$17.mode.arith.s2 $end
$var wire 5 B! \produce__data$17.mode.arith.d $end
$var wire 59 C! \produce__data$17.mode.imm $end
$var wire 3 D! \produce__data$17.mode.imm.f $end
$var wire 7 E! \produce__data$17.mode.imm.m $end
$var wire 32 F! \produce__data$17.mode.imm.s $end
$var wire 12 G! \produce__data$17.mode.imm.i $end
$var wire 5 H! \produce__data$17.mode.imm.d $end
$var wire 79 I! \produce__data$17.mode.store $end
$var wire 3 J! \produce__data$17.mode.store.f $end
$var wire 12 K! \produce__data$17.mode.store.offset $end
$var wire 32 L! \produce__data$17.mode.store.s1 $end
$var wire 32 M! \produce__data$17.mode.store.s2 $end
$var wire 37 N! \produce__data$17.mode.upper $end
$var wire 5 O! \produce__data$17.mode.upper.d $end
$var wire 32 P! \produce__data$17.mode.upper.i $end
$var wire 26 Q! \produce__data$17.mode.jump $end
$var wire 5 R! \produce__data$17.mode.jump.d $end
$var wire 21 S! \produce__data$17.mode.jump.offset $end
$var wire 32 T! consume__s1 $end
$var wire 32 U! consume__s2 $end
$var string 1 V! consume__function $end
$var wire 7 W! consume__mode $end
$var wire 5 X! consume__d $end
$var wire 1 Y! consume__valid$23 $end
$var wire 1 Z! produce__valid$24 $end
$var wire 1 [! produce__ready$25 $end
$var wire 32 \! bus__addr $end
$var wire 32 ]! bus__w_data $end
$var wire 1 ^! bus__w_en $end
$var wire 1 _! bus__stb $end
$var wire 1 `! bus__cyc $end
$var wire 1 a! bus__ack $end
$var wire 2 b! size $end
$var wire 5 c! write__addr $end
$var wire 37 d! produce__data$34 $end
$var wire 5 e! \produce__data$34.d $end
$var wire 32 f! \produce__data$34.value $end
$var wire 32 g! write__w_data $end
$var wire 1 h! write__w_en $end
$var wire 1 i! write__stb $end
$var wire 1 j! produce__valid$38 $end
$var wire 1 k! write__cyc $end
$var wire 1 l! produce__ready$40 $end
$var wire 1 m! write__ack $end
$var string 1 n! write_route $end
$var wire 37 o! consume__data$43 $end
$var wire 5 p! \consume__data$43.d $end
$var wire 32 q! \consume__data$43.value $end
$var wire 32 r! produce__value $end
$var wire 5 s! produce__d $end
$var wire 1 t! consume__valid$46 $end
$var wire 1 u! produce__valid$47 $end
$var wire 1 v! consume__ready$48 $end
$scope module alu $end
$var wire 32 T! consume__s1 $end
$var wire 32 U! consume__s2 $end
$var string 1 V! consume__function $end
$var wire 7 W! consume__mode $end
$var wire 5 X! consume__d $end
$var wire 1 Y! consume__valid $end
$var wire 32 r! produce__value $end
$var wire 5 s! produce__d $end
$var wire 1 u! produce__valid $end
$var wire 1 C# produce__error $end
$upscope $end
$scope module decode $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 118 L produce__data $end
$var wire 32 M \produce__data.pc $end
$var string 1 N \produce__data.op $end
$var wire 79 O \produce__data.mode $end
$var wire 79 P \produce__data.mode.arith $end
$var wire 3 Q \produce__data.mode.arith.f $end
$var wire 7 R \produce__data.mode.arith.m $end
$var wire 32 S \produce__data.mode.arith.s1 $end
$var wire 32 T \produce__data.mode.arith.s2 $end
$var wire 5 U \produce__data.mode.arith.d $end
$var wire 59 V \produce__data.mode.imm $end
$var wire 3 W \produce__data.mode.imm.f $end
$var wire 7 X \produce__data.mode.imm.m $end
$var wire 32 Y \produce__data.mode.imm.s $end
$var wire 12 Z \produce__data.mode.imm.i $end
$var wire 5 [ \produce__data.mode.imm.d $end
$var wire 79 \ \produce__data.mode.store $end
$var wire 3 ] \produce__data.mode.store.f $end
$var wire 12 ^ \produce__data.mode.store.offset $end
$var wire 32 _ \produce__data.mode.store.s1 $end
$var wire 32 ` \produce__data.mode.store.s2 $end
$var wire 37 a \produce__data.mode.upper $end
$var wire 5 b \produce__data.mode.upper.d $end
$var wire 32 c \produce__data.mode.upper.i $end
$var wire 26 d \produce__data.mode.jump $end
$var wire 5 e \produce__data.mode.jump.d $end
$var wire 21 f \produce__data.mode.jump.offset $end
$var wire 1 g produce__ready $end
$var wire 1 j produce__valid $end
$var wire 1 l consume__ready $end
$var wire 64 o consume__data $end
$var wire 32 p \consume__data.pc $end
$var string 1 q \consume__data.op $end
$var wire 25 r \consume__data.mode $end
$var wire 25 s \consume__data.mode.r $end
$var wire 5 t \consume__data.mode.r.rd $end
$var wire 3 u \consume__data.mode.r.f_lower $end
$var wire 5 v \consume__data.mode.r.rs1 $end
$var wire 5 w \consume__data.mode.r.rs2 $end
$var wire 7 x \consume__data.mode.r.f_upper $end
$var wire 25 y \consume__data.mode.i $end
$var wire 5 z \consume__data.mode.i.rd $end
$var wire 3 { \consume__data.mode.i.f $end
$var wire 5 | \consume__data.mode.i.rs $end
$var wire 12 } \consume__data.mode.i.imm $end
$var wire 25 ~ \consume__data.mode.u $end
$var wire 5 !! \consume__data.mode.u.rd $end
$var wire 20 "! \consume__data.mode.u.imm $end
$var wire 25 #! \consume__data.mode.s $end
$var wire 5 $! \consume__data.mode.s.imm_lower $end
$var wire 3 %! \consume__data.mode.s.f $end
$var wire 5 &! \consume__data.mode.s.rs1 $end
$var wire 5 '! \consume__data.mode.s.rs2 $end
$var wire 7 (! \consume__data.mode.s.imm_upper $end
$var wire 25 )! \consume__data.mode.j $end
$var wire 5 *! \consume__data.mode.j.rd $end
$var wire 20 +! \consume__data.mode.j.offset $end
$var wire 25 ,! \consume__data.mode.b $end
$var wire 5 -! \consume__data.mode.b.offset_lower $end
$var wire 3 .! \consume__data.mode.b.f $end
$var wire 5 /! \consume__data.mode.b.rs1 $end
$var wire 5 0! \consume__data.mode.b.rs2 $end
$var wire 7 1! \consume__data.mode.b.offset_upper $end
$var wire 25 2! \consume__data.mode.m $end
$var wire 5 3! \consume__data.mode.m.rd $end
$var wire 3 4! \consume__data.mode.m.f $end
$var wire 5 5! \consume__data.mode.m.rs1 $end
$var wire 5 6! \consume__data.mode.m.rs2 $end
$var wire 7 7! \consume__data.mode.m.muldiv $end
$var wire 1 8! consume__valid $end
$var wire 5 c! write__addr $end
$var wire 32 g! write__w_data $end
$var wire 1 h! write__w_en $end
$var wire 1 i! write__stb $end
$var wire 1 k! write__cyc $end
$var wire 1 m! write__ack $end
$var wire 5 w! r_rd $end
$var wire 1 x! r_valid $end
$var wire 1 y! reg_write $end
$var wire 1 z! register_ready $end
$var wire 1 {! error_flag $end
$var wire 32 |! rs1__r_data $end
$var wire 32 }! rs2__r_data $end
$var wire 1 ~! error__cyc $end
$var wire 1 !" error__stb $end
$var wire 1 "" error__w_en $end
$var wire 32 #" error__w_data $end
$var wire 5 $" rs1__addr $end
$var wire 5 %" rs2__addr $end
$var wire 2 &" num_regs $end
$var wire 1 '" rs1__cyc $end
$var wire 1 (" rs1__stb $end
$var wire 1 )" rs1__ack $end
$var wire 1 *" rs2__cyc $end
$var wire 1 +" rs2__stb $end
$var wire 1 ," rs2__ack $end
$var wire 5 -" rd__addr $end
$var wire 1 ." rd__cyc $end
$var wire 1 /" rd__stb $end
$var wire 32 0" rd__w_data $end
$var wire 1 1" rd__w_en $end
$var wire 32 2" debug__r_data $end
$var wire 32 3" rd__r_data $end
$var wire 1 4" rd__ack $end
$var wire 5 5" debug__addr $end
$var wire 1 6" debug__cyc $end
$var wire 1 7" debug__stb $end
$var wire 32 8" debug__w_data $end
$var wire 1 9" debug__w_en $end
$var wire 1 :" debug__ack $end
$scope module reg $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 5 w! r_rd$3 $end
$var wire 1 x! r_valid$1 $end
$var wire 32 |! rs1__r_data $end
$var wire 32 }! rs2__r_data $end
$var wire 5 $" rs1__addr $end
$var wire 5 %" rs2__addr $end
$var wire 1 )" rs1__ack $end
$var wire 1 ," rs2__ack $end
$var wire 5 -" rd__addr $end
$var wire 1 ." rd__cyc $end
$var wire 1 /" rd__stb $end
$var wire 32 0" rd__w_data $end
$var wire 1 1" rd__w_en $end
$var wire 32 3" rd__r_data $end
$var wire 1 4" rd__ack $end
$var wire 1 ;" r_valid $end
$var wire 5 <" r_rd $end
$var wire 5 =" r_rs1 $end
$var wire 5 >" r_rs2 $end
$var wire 32 ?" r00 $end
$var wire 32 @" r01 $end
$var wire 32 A" r02 $end
$var wire 32 B" r03 $end
$var wire 32 C" r04 $end
$var wire 32 D" r05 $end
$var wire 32 E" r06 $end
$var wire 32 F" r07 $end
$var wire 32 G" r08 $end
$var wire 32 H" r09 $end
$var wire 32 I" r0A $end
$var wire 32 J" r0B $end
$var wire 32 K" r0C $end
$var wire 32 L" r0D $end
$var wire 32 M" r0E $end
$var wire 32 N" r0F $end
$var wire 32 O" r10 $end
$var wire 32 P" r11 $end
$var wire 32 Q" r12 $end
$var wire 32 R" r13 $end
$var wire 32 S" r14 $end
$var wire 32 T" r15 $end
$var wire 32 U" r16 $end
$var wire 32 V" r17 $end
$var wire 32 W" r18 $end
$var wire 32 X" r19 $end
$var wire 32 Y" r1A $end
$var wire 32 Z" r1B $end
$var wire 32 [" r1C $end
$var wire 32 \" r1D $end
$var wire 32 ]" r1E $end
$var wire 32 ^" r1F $end
$var wire 1 _" r_ok1 $end
$var wire 1 `" r_ok2 $end
$var wire 1 a" w_valid $end
$var wire 5 b" w_rd $end
$scope module mask $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 ;" r_valid $end
$var wire 5 <" r_rd $end
$var wire 5 =" r_rs1 $end
$var wire 5 >" r_rs2 $end
$var wire 1 _" r_ok1 $end
$var wire 1 `" r_ok2 $end
$var wire 1 a" w_valid $end
$var wire 5 b" w_rd $end
$var wire 1 c" r1_ok $end
$var wire 32 d" reg_mask $end
$var wire 1 e" r2_ok $end
$var wire 32 f" set_mask $end
$var wire 32 g" clear_mask $end
$upscope $end
$upscope $end
$upscope $end
$scope module decode_buffer $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 118 1 consume__data $end
$var wire 32 2 \consume__data.pc $end
$var string 1 3 \consume__data.op $end
$var wire 79 4 \consume__data.mode $end
$var wire 79 5 \consume__data.mode.arith $end
$var wire 3 6 \consume__data.mode.arith.f $end
$var wire 7 7 \consume__data.mode.arith.m $end
$var wire 32 8 \consume__data.mode.arith.s1 $end
$var wire 32 9 \consume__data.mode.arith.s2 $end
$var wire 5 : \consume__data.mode.arith.d $end
$var wire 59 ; \consume__data.mode.imm $end
$var wire 3 < \consume__data.mode.imm.f $end
$var wire 7 = \consume__data.mode.imm.m $end
$var wire 32 > \consume__data.mode.imm.s $end
$var wire 12 ? \consume__data.mode.imm.i $end
$var wire 5 @ \consume__data.mode.imm.d $end
$var wire 79 A \consume__data.mode.store $end
$var wire 3 B \consume__data.mode.store.f $end
$var wire 12 C \consume__data.mode.store.offset $end
$var wire 32 D \consume__data.mode.store.s1 $end
$var wire 32 E \consume__data.mode.store.s2 $end
$var wire 37 F \consume__data.mode.upper $end
$var wire 5 G \consume__data.mode.upper.d $end
$var wire 32 H \consume__data.mode.upper.i $end
$var wire 26 I \consume__data.mode.jump $end
$var wire 5 J \consume__data.mode.jump.d $end
$var wire 21 K \consume__data.mode.jump.offset $end
$var wire 1 h consume__ready $end
$var wire 1 i consume__valid $end
$var wire 118 9! produce__data $end
$var wire 32 :! \produce__data.pc $end
$var string 1 ;! \produce__data.op $end
$var wire 79 <! \produce__data.mode $end
$var wire 79 =! \produce__data.mode.arith $end
$var wire 3 >! \produce__data.mode.arith.f $end
$var wire 7 ?! \produce__data.mode.arith.m $end
$var wire 32 @! \produce__data.mode.arith.s1 $end
$var wire 32 A! \produce__data.mode.arith.s2 $end
$var wire 5 B! \produce__data.mode.arith.d $end
$var wire 59 C! \produce__data.mode.imm $end
$var wire 3 D! \produce__data.mode.imm.f $end
$var wire 7 E! \produce__data.mode.imm.m $end
$var wire 32 F! \produce__data.mode.imm.s $end
$var wire 12 G! \produce__data.mode.imm.i $end
$var wire 5 H! \produce__data.mode.imm.d $end
$var wire 79 I! \produce__data.mode.store $end
$var wire 3 J! \produce__data.mode.store.f $end
$var wire 12 K! \produce__data.mode.store.offset $end
$var wire 32 L! \produce__data.mode.store.s1 $end
$var wire 32 M! \produce__data.mode.store.s2 $end
$var wire 37 N! \produce__data.mode.upper $end
$var wire 5 O! \produce__data.mode.upper.d $end
$var wire 32 P! \produce__data.mode.upper.i $end
$var wire 26 Q! \produce__data.mode.jump $end
$var wire 5 R! \produce__data.mode.jump.d $end
$var wire 21 S! \produce__data.mode.jump.offset $end
$var wire 1 Z! produce__valid $end
$var wire 1 [! produce__ready $end
$var wire 1 h" produce_select $end
$var wire 1 i" select $end
$var wire 118 j" c0 $end
$var wire 32 k" \c0.pc $end
$var string 1 l" \c0.op $end
$var wire 79 m" \c0.mode $end
$var wire 79 n" \c0.mode.arith $end
$var wire 3 o" \c0.mode.arith.f $end
$var wire 7 p" \c0.mode.arith.m $end
$var wire 32 q" \c0.mode.arith.s1 $end
$var wire 32 r" \c0.mode.arith.s2 $end
$var wire 5 s" \c0.mode.arith.d $end
$var wire 59 t" \c0.mode.imm $end
$var wire 3 u" \c0.mode.imm.f $end
$var wire 7 v" \c0.mode.imm.m $end
$var wire 32 w" \c0.mode.imm.s $end
$var wire 12 x" \c0.mode.imm.i $end
$var wire 5 y" \c0.mode.imm.d $end
$var wire 79 z" \c0.mode.store $end
$var wire 3 {" \c0.mode.store.f $end
$var wire 12 |" \c0.mode.store.offset $end
$var wire 32 }" \c0.mode.store.s1 $end
$var wire 32 ~" \c0.mode.store.s2 $end
$var wire 37 !# \c0.mode.upper $end
$var wire 5 "# \c0.mode.upper.d $end
$var wire 32 ## \c0.mode.upper.i $end
$var wire 26 $# \c0.mode.jump $end
$var wire 5 %# \c0.mode.jump.d $end
$var wire 21 &# \c0.mode.jump.offset $end
$var wire 118 '# c1 $end
$var wire 32 (# \c1.pc $end
$var string 1 )# \c1.op $end
$var wire 79 *# \c1.mode $end
$var wire 79 +# \c1.mode.arith $end
$var wire 3 ,# \c1.mode.arith.f $end
$var wire 7 -# \c1.mode.arith.m $end
$var wire 32 .# \c1.mode.arith.s1 $end
$var wire 32 /# \c1.mode.arith.s2 $end
$var wire 5 0# \c1.mode.arith.d $end
$var wire 59 1# \c1.mode.imm $end
$var wire 3 2# \c1.mode.imm.f $end
$var wire 7 3# \c1.mode.imm.m $end
$var wire 32 4# \c1.mode.imm.s $end
$var wire 12 5# \c1.mode.imm.i $end
$var wire 5 6# \c1.mode.imm.d $end
$var wire 79 7# \c1.mode.store $end
$var wire 3 8# \c1.mode.store.f $end
$var wire 12 9# \c1.mode.store.offset $end
$var wire 32 :# \c1.mode.store.s1 $end
$var wire 32 ;# \c1.mode.store.s2 $end
$var wire 37 <# \c1.mode.upper $end
$var wire 5 =# \c1.mode.upper.d $end
$var wire 32 ># \c1.mode.upper.i $end
$var wire 26 ?# \c1.mode.jump $end
$var wire 5 @# \c1.mode.jump.d $end
$var wire 21 A# \c1.mode.jump.offset $end
$var wire 2 B# cache_ready $end
$upscope $end
$scope module write_buffer $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 37 d! produce__data $end
$var wire 5 e! \produce__data.d $end
$var wire 32 f! \produce__data.value $end
$var wire 1 j! produce__valid $end
$var wire 1 l! produce__ready $end
$var wire 37 o! consume__data $end
$var wire 5 p! \consume__data.d $end
$var wire 32 q! \consume__data.value $end
$var wire 1 t! consume__valid $end
$var wire 1 v! consume__ready $end
$var wire 1 D# produce_select $end
$var wire 1 E# select $end
$var wire 37 F# c0 $end
$var wire 5 G# \c0.d $end
$var wire 32 H# \c0.value $end
$var wire 37 I# c1 $end
$var wire 5 J# \c1.d $end
$var wire 32 K# \c1.value $end
$var wire 2 L# cache_ready $end
$upscope $end
$upscope $end
$scope module ram $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 $ bus__ack $end
$var wire 32 % bus__addr $end
$var wire 1 ' bus__cyc $end
$var wire 32 * bus__r_data $end
$var wire 1 + bus__stb $end
$var wire 32 - bus__w_data $end
$var wire 1 / bus__w_en $end
$var wire 1 M# write_port__en $end
$var wire 8 N# write_port__addr $end
$var wire 8 O# read_port__addr $end
$var wire 1 P# write_ok $end
$var wire 1 Q# read_ok $end
$var wire 32 R# read_port__data $end
$var wire 32 S# write_port__data $end
$var wire 32 T# \mem[0] $end
$var wire 32 U# \mem[1] $end
$var wire 32 V# \mem[2] $end
$var wire 32 W# \mem[3] $end
$var wire 32 X# \mem[4] $end
$var wire 32 Y# \mem[5] $end
$var wire 32 Z# \mem[6] $end
$var wire 32 [# \mem[7] $end
$var wire 32 \# \mem[8] $end
$var wire 32 ]# \mem[9] $end
$var wire 32 ^# \mem[10] $end
$var wire 32 _# \mem[11] $end
$var wire 32 `# \mem[12] $end
$var wire 32 a# \mem[13] $end
$var wire 32 b# \mem[14] $end
$var wire 32 c# \mem[15] $end
$var wire 32 d# \mem[16] $end
$var wire 32 e# \mem[17] $end
$var wire 32 f# \mem[18] $end
$var wire 32 g# \mem[19] $end
$var wire 32 h# \mem[20] $end
$var wire 32 i# \mem[21] $end
$var wire 32 j# \mem[22] $end
$var wire 32 k# \mem[23] $end
$var wire 32 l# \mem[24] $end
$var wire 32 m# \mem[25] $end
$var wire 32 n# \mem[26] $end
$var wire 32 o# \mem[27] $end
$var wire 32 p# \mem[28] $end
$var wire 32 q# \mem[29] $end
$var wire 32 r# \mem[30] $end
$var wire 32 s# \mem[31] $end
$var wire 32 t# \mem[32] $end
$var wire 32 u# \mem[33] $end
$var wire 32 v# \mem[34] $end
$var wire 32 w# \mem[35] $end
$var wire 32 x# \mem[36] $end
$var wire 32 y# \mem[37] $end
$var wire 32 z# \mem[38] $end
$var wire 32 {# \mem[39] $end
$var wire 32 |# \mem[40] $end
$var wire 32 }# \mem[41] $end
$var wire 32 ~# \mem[42] $end
$var wire 32 !$ \mem[43] $end
$var wire 32 "$ \mem[44] $end
$var wire 32 #$ \mem[45] $end
$var wire 32 $$ \mem[46] $end
$var wire 32 %$ \mem[47] $end
$var wire 32 &$ \mem[48] $end
$var wire 32 '$ \mem[49] $end
$var wire 32 ($ \mem[50] $end
$var wire 32 )$ \mem[51] $end
$var wire 32 *$ \mem[52] $end
$var wire 32 +$ \mem[53] $end
$var wire 32 ,$ \mem[54] $end
$var wire 32 -$ \mem[55] $end
$var wire 32 .$ \mem[56] $end
$var wire 32 /$ \mem[57] $end
$var wire 32 0$ \mem[58] $end
$var wire 32 1$ \mem[59] $end
$var wire 32 2$ \mem[60] $end
$var wire 32 3$ \mem[61] $end
$var wire 32 4$ \mem[62] $end
$var wire 32 5$ \mem[63] $end
$var wire 32 6$ \mem[64] $end
$var wire 32 7$ \mem[65] $end
$var wire 32 8$ \mem[66] $end
$var wire 32 9$ \mem[67] $end
$var wire 32 :$ \mem[68] $end
$var wire 32 ;$ \mem[69] $end
$var wire 32 <$ \mem[70] $end
$var wire 32 =$ \mem[71] $end
$var wire 32 >$ \mem[72] $end
$var wire 32 ?$ \mem[73] $end
$var wire 32 @$ \mem[74] $end
$var wire 32 A$ \mem[75] $end
$var wire 32 B$ \mem[76] $end
$var wire 32 C$ \mem[77] $end
$var wire 32 D$ \mem[78] $end
$var wire 32 E$ \mem[79] $end
$var wire 32 F$ \mem[80] $end
$var wire 32 G$ \mem[81] $end
$var wire 32 H$ \mem[82] $end
$var wire 32 I$ \mem[83] $end
$var wire 32 J$ \mem[84] $end
$var wire 32 K$ \mem[85] $end
$var wire 32 L$ \mem[86] $end
$var wire 32 M$ \mem[87] $end
$var wire 32 N$ \mem[88] $end
$var wire 32 O$ \mem[89] $end
$var wire 32 P$ \mem[90] $end
$var wire 32 Q$ \mem[91] $end
$var wire 32 R$ \mem[92] $end
$var wire 32 S$ \mem[93] $end
$var wire 32 T$ \mem[94] $end
$var wire 32 U$ \mem[95] $end
$var wire 32 V$ \mem[96] $end
$var wire 32 W$ \mem[97] $end
$var wire 32 X$ \mem[98] $end
$var wire 32 Y$ \mem[99] $end
$var wire 32 Z$ \mem[100] $end
$var wire 32 [$ \mem[101] $end
$var wire 32 \$ \mem[102] $end
$var wire 32 ]$ \mem[103] $end
$var wire 32 ^$ \mem[104] $end
$var wire 32 _$ \mem[105] $end
$var wire 32 `$ \mem[106] $end
$var wire 32 a$ \mem[107] $end
$var wire 32 b$ \mem[108] $end
$var wire 32 c$ \mem[109] $end
$var wire 32 d$ \mem[110] $end
$var wire 32 e$ \mem[111] $end
$var wire 32 f$ \mem[112] $end
$var wire 32 g$ \mem[113] $end
$var wire 32 h$ \mem[114] $end
$var wire 32 i$ \mem[115] $end
$var wire 32 j$ \mem[116] $end
$var wire 32 k$ \mem[117] $end
$var wire 32 l$ \mem[118] $end
$var wire 32 m$ \mem[119] $end
$var wire 32 n$ \mem[120] $end
$var wire 32 o$ \mem[121] $end
$var wire 32 p$ \mem[122] $end
$var wire 32 q$ \mem[123] $end
$var wire 32 r$ \mem[124] $end
$var wire 32 s$ \mem[125] $end
$var wire 32 t$ \mem[126] $end
$var wire 32 u$ \mem[127] $end
$var wire 32 v$ \mem[128] $end
$var wire 32 w$ \mem[129] $end
$var wire 32 x$ \mem[130] $end
$var wire 32 y$ \mem[131] $end
$var wire 32 z$ \mem[132] $end
$var wire 32 {$ \mem[133] $end
$var wire 32 |$ \mem[134] $end
$var wire 32 }$ \mem[135] $end
$var wire 32 ~$ \mem[136] $end
$var wire 32 !% \mem[137] $end
$var wire 32 "% \mem[138] $end
$var wire 32 #% \mem[139] $end
$var wire 32 $% \mem[140] $end
$var wire 32 %% \mem[141] $end
$var wire 32 &% \mem[142] $end
$var wire 32 '% \mem[143] $end
$var wire 32 (% \mem[144] $end
$var wire 32 )% \mem[145] $end
$var wire 32 *% \mem[146] $end
$var wire 32 +% \mem[147] $end
$var wire 32 ,% \mem[148] $end
$var wire 32 -% \mem[149] $end
$var wire 32 .% \mem[150] $end
$var wire 32 /% \mem[151] $end
$var wire 32 0% \mem[152] $end
$var wire 32 1% \mem[153] $end
$var wire 32 2% \mem[154] $end
$var wire 32 3% \mem[155] $end
$var wire 32 4% \mem[156] $end
$var wire 32 5% \mem[157] $end
$var wire 32 6% \mem[158] $end
$var wire 32 7% \mem[159] $end
$var wire 32 8% \mem[160] $end
$var wire 32 9% \mem[161] $end
$var wire 32 :% \mem[162] $end
$var wire 32 ;% \mem[163] $end
$var wire 32 <% \mem[164] $end
$var wire 32 =% \mem[165] $end
$var wire 32 >% \mem[166] $end
$var wire 32 ?% \mem[167] $end
$var wire 32 @% \mem[168] $end
$var wire 32 A% \mem[169] $end
$var wire 32 B% \mem[170] $end
$var wire 32 C% \mem[171] $end
$var wire 32 D% \mem[172] $end
$var wire 32 E% \mem[173] $end
$var wire 32 F% \mem[174] $end
$var wire 32 G% \mem[175] $end
$var wire 32 H% \mem[176] $end
$var wire 32 I% \mem[177] $end
$var wire 32 J% \mem[178] $end
$var wire 32 K% \mem[179] $end
$var wire 32 L% \mem[180] $end
$var wire 32 M% \mem[181] $end
$var wire 32 N% \mem[182] $end
$var wire 32 O% \mem[183] $end
$var wire 32 P% \mem[184] $end
$var wire 32 Q% \mem[185] $end
$var wire 32 R% \mem[186] $end
$var wire 32 S% \mem[187] $end
$var wire 32 T% \mem[188] $end
$var wire 32 U% \mem[189] $end
$var wire 32 V% \mem[190] $end
$var wire 32 W% \mem[191] $end
$var wire 32 X% \mem[192] $end
$var wire 32 Y% \mem[193] $end
$var wire 32 Z% \mem[194] $end
$var wire 32 [% \mem[195] $end
$var wire 32 \% \mem[196] $end
$var wire 32 ]% \mem[197] $end
$var wire 32 ^% \mem[198] $end
$var wire 32 _% \mem[199] $end
$var wire 32 `% \mem[200] $end
$var wire 32 a% \mem[201] $end
$var wire 32 b% \mem[202] $end
$var wire 32 c% \mem[203] $end
$var wire 32 d% \mem[204] $end
$var wire 32 e% \mem[205] $end
$var wire 32 f% \mem[206] $end
$var wire 32 g% \mem[207] $end
$var wire 32 h% \mem[208] $end
$var wire 32 i% \mem[209] $end
$var wire 32 j% \mem[210] $end
$var wire 32 k% \mem[211] $end
$var wire 32 l% \mem[212] $end
$var wire 32 m% \mem[213] $end
$var wire 32 n% \mem[214] $end
$var wire 32 o% \mem[215] $end
$var wire 32 p% \mem[216] $end
$var wire 32 q% \mem[217] $end
$var wire 32 r% \mem[218] $end
$var wire 32 s% \mem[219] $end
$var wire 32 t% \mem[220] $end
$var wire 32 u% \mem[221] $end
$var wire 32 v% \mem[222] $end
$var wire 32 w% \mem[223] $end
$var wire 32 x% \mem[224] $end
$var wire 32 y% \mem[225] $end
$var wire 32 z% \mem[226] $end
$var wire 32 {% \mem[227] $end
$var wire 32 |% \mem[228] $end
$var wire 32 }% \mem[229] $end
$var wire 32 ~% \mem[230] $end
$var wire 32 !& \mem[231] $end
$var wire 32 "& \mem[232] $end
$var wire 32 #& \mem[233] $end
$var wire 32 $& \mem[234] $end
$var wire 32 %& \mem[235] $end
$var wire 32 && \mem[236] $end
$var wire 32 '& \mem[237] $end
$var wire 32 (& \mem[238] $end
$var wire 32 )& \mem[239] $end
$var wire 32 *& \mem[240] $end
$var wire 32 +& \mem[241] $end
$var wire 32 ,& \mem[242] $end
$var wire 32 -& \mem[243] $end
$var wire 32 .& \mem[244] $end
$var wire 32 /& \mem[245] $end
$var wire 32 0& \mem[246] $end
$var wire 32 1& \mem[247] $end
$var wire 32 2& \mem[248] $end
$var wire 32 3& \mem[249] $end
$var wire 32 4& \mem[250] $end
$var wire 32 5& \mem[251] $end
$var wire 32 6& \mem[252] $end
$var wire 32 7& \mem[253] $end
$var wire 32 8& \mem[254] $end
$var wire 32 9& \mem[255] $end
$scope module mem $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 M# write_port__en $end
$var wire 8 N# write_port__addr $end
$var wire 8 O# read_port__addr $end
$var wire 32 R# read_port__data $end
$var wire 32 S# write_port__data $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0"
1#
1$
b0 %
b0 &
1'
1(
b111000000010011 )
b111000000010011 *
1+
1,
b0 -
b0 .
0/
00
b111001001100000000000000000000000000000000 1
b0 2
sARITHIMM 3
b111 4
b111 5
b111 6
b0 7
b0 8
b0 9
b0 :
b111 ;
b111 <
b0 =
b0 >
b0 ?
b0 @
b111 A
b111 B
b0 C
b0 D
b0 E
b111 F
b111 G
b0 H
b111 I
b111 J
b0 K
b111001001100000000000000000000000000000000 L
b0 M
sARITHIMM N
b111 O
b111 P
b111 Q
b0 R
b0 S
b0 T
b0 U
b111 V
b111 W
b0 X
b0 Y
b0 Z
b0 [
b111 \
b111 ]
b0 ^
b0 _
b0 `
b111 a
b111 b
b0 c
b111 d
b111 e
b0 f
1g
1h
1i
1j
b0 k
1l
1m
0n
b11100000001001100000000000000000000000000000000 o
b0 p
sARITHIMM q
b11100000 r
b11100000 s
b0 t
b111 u
b0 v
b0 w
b0 x
b11100000 y
b0 z
b111 {
b0 |
b0 }
b11100000 ~
b0 !!
b111 "!
b11100000 #!
b0 $!
b111 %!
b0 &!
b0 '!
b0 (!
b11100000 )!
b0 *!
b111 +!
b11100000 ,!
b0 -!
b111 .!
b0 /!
b0 0!
b0 1!
b11100000 2!
b0 3!
b111 4!
b0 5!
b0 6!
b0 7!
18!
b0 9!
b0 :!
s[unknown] ;!
b0 <!
b0 =!
b0 >!
b0 ?!
b0 @!
b0 A!
b0 B!
b0 C!
b0 D!
b0 E!
b0 F!
b0 G!
b0 H!
b0 I!
b0 J!
b0 K!
b0 L!
b0 M!
b0 N!
b0 O!
b0 P!
b0 Q!
b0 R!
b0 S!
b0 T!
b0 U!
sADDSUB V!
b0 W!
b0 X!
0Y!
0Z!
0[!
b0 \!
b0 ]!
0^!
0_!
0`!
0a!
b0 b!
b0 c!
b0 d!
b0 e!
b0 f!
b0 g!
1h!
0i!
0j!
0k!
0l!
0m!
sNONE n!
b0 o!
b0 p!
b0 q!
b0 r!
b0 s!
0t!
0u!
1v!
b0 w!
1x!
1y!
1z!
0{!
b0 |!
b0 }!
0~!
0!"
0""
b0 #"
b0 $"
b0 %"
b1 &"
1'"
1("
1)"
0*"
0+"
1,"
b0 -"
0."
0/"
b0 0"
11"
b0 2"
b0 3"
04"
b0 5"
06"
07"
b0 8"
09"
0:"
1;"
b0 <"
b0 ="
b0 >"
b0 ?"
b0 @"
b0 A"
b0 B"
b0 C"
b0 D"
b0 E"
b0 F"
b0 G"
b0 H"
b0 I"
b0 J"
b0 K"
b0 L"
b0 M"
b0 N"
b0 O"
b0 P"
b0 Q"
b0 R"
b0 S"
b0 T"
b0 U"
b0 V"
b0 W"
b0 X"
b0 Y"
b0 Z"
b0 ["
b0 \"
b0 ]"
b0 ^"
1_"
1`"
0a"
b0 b"
1c"
b0 d"
1e"
b1 f"
b11111111111111111111111111111111 g"
1h"
0i"
b0 j"
b0 k"
s[unknown] l"
b0 m"
b0 n"
b0 o"
b0 p"
b0 q"
b0 r"
b0 s"
b0 t"
b0 u"
b0 v"
b0 w"
b0 x"
b0 y"
b0 z"
b0 {"
b0 |"
b0 }"
b0 ~"
b0 !#
b0 "#
b0 ##
b0 $#
b0 %#
b0 &#
b0 '#
b0 (#
s[unknown] )#
b0 *#
b0 +#
b0 ,#
b0 -#
b0 .#
b0 /#
b0 0#
b0 1#
b0 2#
b0 3#
b0 4#
b0 5#
b0 6#
b0 7#
b0 8#
b0 9#
b0 :#
b0 ;#
b0 <#
b0 =#
b0 >#
b0 ?#
b0 @#
b0 A#
b11 B#
0C#
1D#
0E#
b0 F#
b0 G#
b0 H#
b0 I#
b0 J#
b0 K#
b11 L#
0M#
b0 N#
b0 O#
0P#
1Q#
b111000000010011 R#
b0 S#
b111000000010011 T#
b1111000010010011 U#
b1100000000000000010011 V#
b1010000000100011 W#
b0 X#
b0 Y#
b0 Z#
b0 [#
b0 \#
b0 ]#
b0 ^#
b0 _#
b0 `#
b0 a#
b0 b#
b0 c#
b0 d#
b0 e#
b0 f#
b0 g#
b0 h#
b0 i#
b0 j#
b0 k#
b0 l#
b0 m#
b0 n#
b0 o#
b0 p#
b0 q#
b0 r#
b0 s#
b0 t#
b0 u#
b0 v#
b0 w#
b0 x#
b0 y#
b0 z#
b0 {#
b0 |#
b0 }#
b0 ~#
b0 !$
b0 "$
b0 #$
b0 $$
b0 %$
b0 &$
b0 '$
b0 ($
b0 )$
b0 *$
b0 +$
b0 ,$
b0 -$
b0 .$
b0 /$
b0 0$
b0 1$
b0 2$
b0 3$
b0 4$
b0 5$
b0 6$
b0 7$
b0 8$
b0 9$
b0 :$
b0 ;$
b0 <$
b0 =$
b0 >$
b0 ?$
b0 @$
b0 A$
b0 B$
b0 C$
b0 D$
b0 E$
b0 F$
b0 G$
b0 H$
b0 I$
b0 J$
b0 K$
b0 L$
b0 M$
b0 N$
b0 O$
b0 P$
b0 Q$
b0 R$
b0 S$
b0 T$
b0 U$
b0 V$
b0 W$
b0 X$
b0 Y$
b0 Z$
b0 [$
b0 \$
b0 ]$
b0 ^$
b0 _$
b0 `$
b0 a$
b0 b$
b0 c$
b0 d$
b0 e$
b0 f$
b0 g$
b0 h$
b0 i$
b0 j$
b0 k$
b0 l$
b0 m$
b0 n$
b0 o$
b0 p$
b0 q$
b0 r$
b0 s$
b0 t$
b0 u$
b0 v$
b0 w$
b0 x$
b0 y$
b0 z$
b0 {$
b0 |$
b0 }$
b0 ~$
b0 !%
b0 "%
b0 #%
b0 $%
b0 %%
b0 &%
b0 '%
b0 (%
b0 )%
b0 *%
b0 +%
b0 ,%
b0 -%
b0 .%
b0 /%
b0 0%
b0 1%
b0 2%
b0 3%
b0 4%
b0 5%
b0 6%
b0 7%
b0 8%
b0 9%
b0 :%
b0 ;%
b0 <%
b0 =%
b0 >%
b0 ?%
b0 @%
b0 A%
b0 B%
b0 C%
b0 D%
b0 E%
b0 F%
b0 G%
b0 H%
b0 I%
b0 J%
b0 K%
b0 L%
b0 M%
b0 N%
b0 O%
b0 P%
b0 Q%
b0 R%
b0 S%
b0 T%
b0 U%
b0 V%
b0 W%
b0 X%
b0 Y%
b0 Z%
b0 [%
b0 \%
b0 ]%
b0 ^%
b0 _%
b0 `%
b0 a%
b0 b%
b0 c%
b0 d%
b0 e%
b0 f%
b0 g%
b0 h%
b0 i%
b0 j%
b0 k%
b0 l%
b0 m%
b0 n%
b0 o%
b0 p%
b0 q%
b0 r%
b0 s%
b0 t%
b0 u%
b0 v%
b0 w%
b0 x%
b0 y%
b0 z%
b0 {%
b0 |%
b0 }%
b0 ~%
b0 !&
b0 "&
b0 #&
b0 $&
b0 %&
b0 &&
b0 '&
b0 (&
b0 )&
b0 *&
b0 +&
b0 ,&
b0 -&
b0 .&
b0 /&
b0 0&
b0 1&
b0 2&
b0 3&
b0 4&
b0 5&
b0 6&
b0 7&
b0 8&
b0 9&
$end
#5000000
1!
b1 d"
1i"
b111001001100000000000000000000000000000000 j"
sARITHIMM l"
b111 m"
b111 n"
b111 o"
b111 t"
b111 u"
b111 z"
b111 {"
b111 !#
b111 "#
b111 $#
b111 %#
b10 B#
b100 k
1Z!
b11100000001001100000000000000000000000000000100 o
b100 p
0c"
0e"
0h"
b100 &
0`"
b111001001100000000000000000000000000000100 L
b100 M
b111001001100000000000000000000000000000000 9!
sARITHIMM ;!
b111 <!
b111 =!
b111 >!
b111 C!
b111 D!
b111 I!
b111 J!
b111 N!
b111 O!
b111 Q!
b111 R!
b100 %
0_"
b1 N#
0,"
1Y!
1[!
b111001001100000000000000000000000000000100 1
b100 2
b1 O#
sALU n!
sAND V!
0)"
b1111000010010011 R#
1u!
0z!
0l
1t!
b1111000010010011 *
0j
0,
b1111000010010011 )
0x!
0(
0i
0'
b111100001001001100000000000000000000000000000100 o
b111100001 r
b111100001 s
b1 t
b1 v
b111100001 y
b1 z
b1 |
b111100001 ~
b1 !!
b1111 "!
b111100001 #!
b1 $!
b1 &!
b111100001 )!
b1 *!
b1111 +!
b111100001 ,!
b1 -!
b1 /!
b111100001 2!
b1 3!
b1 5!
0+
0;"
b0 f"
b1 $"
b1000000000000000000000000000000000000000000000000000111001001100000000000000000000000000000100 L
b1000000000000000000000000000000000000000000000000000111 O
b1000000000000000000000000000000000000000000000000000111 P
b1000000000000 T
b1000000000000000000000000000000000000000000000000000111 V
b1 [
b1000000000000000000000000000000000000000000000000000111 \
b10000000 `
0Q#
b1 w!
b1000000000000000000000000000000000000000000000000000111001001100000000000000000000000000000100 1
b1000000000000000000000000000000000000000000000000000111 4
b1000000000000000000000000000000000000000000000000000111 5
b1000000000000 9
b1000000000000000000000000000000000000000000000000000111 ;
b1 @
b1000000000000000000000000000000000000000000000000000111 A
b10000000 E
b1 ="
0$
b1 <"
0#
1c"
1_"
08!
0("
0'"
1)"
1z!
1l
1,
1(
1'
1+
1Q#
1$
1#
18!
1x!
1("
1'"
1j
1;"
1i
b10 f"
#10000000
0!
#15000000
1!
b11 d"
0i"
1E#
b1 B#
b1000000000000000000000000000000000000000000000000000111001001100000000000000000000000000000100 '#
b100 (#
sARITHIMM )#
b1000000000000000000000000000000000000000000000000000111 *#
b1000000000000000000000000000000000000000000000000000111 +#
b111 ,#
b1000000000000 /#
b1000000000000000000000000000000000000000000000000000111 1#
b111 2#
b1 6#
b1000000000000000000000000000000000000000000000000000111 7#
b111 8#
b10000000 ;#
b111 <#
b111 =#
b111 ?#
b111 @#
b10 L#
b1000 k
b111100001001001100000000000000000000000000001000 o
b1000 p
0D#
1h"
b1000 &
1j!
1i!
1k!
b1000000000000000000000000000000000000000000000000000111001001100000000000000000000000000001000 L
b1000 M
b1000000000000000000000000000000000000000000000000000111001001100000000000000000000000000000100 9!
b100 :!
b1000000000000000000000000000000000000000000000000000111 <!
b1000000000000000000000000000000000000000000000000000111 =!
b1000000000000 A!
b1000000000000000000000000000000000000000000000000000111 C!
b1 H!
b1000000000000000000000000000000000000000000000000000111 I!
b10000000 M!
b1000 %
b1 X!
b10 N#
b1000000000000000000000000000000000000000000000000000111001001100000000000000000000000000001000 1
b1000 2
1."
b10 O#
1/"
14"
b1100000000000000010011 R#
b1 s!
1a"
b1100000000000000010011 *
1m!
b11111111111111111111111111111110 g"
b1 o!
b1 p!
b1100000000000000010011 )
1l!
b110000000000000001001100000000000000000000000000001000 o
b110000000000000 r
b110000000000000 s
b0 t
b0 u
b0 v
b11 w
b110000000000000 y
b0 z
b0 {
b0 |
b11 }
b110000000000000 ~
b0 !!
b1100000000 "!
b110000000000000 #!
b0 $!
b0 %!
b0 &!
b11 '!
b110000000000000 )!
b0 *!
b1100000000 +!
b110000000000000 ,!
b0 -!
b0 .!
b0 /!
b11 0!
b110000000000000 2!
b0 3!
b0 4!
b0 5!
b11 6!
b0 w!
b11 %"
b0 $"
b11000000000000000000000000000000000000000000001001100000000000000000000000000001000 L
b11000000000000000000000000000000000000000000 O
b11000000000000000000000000000000000000000000 P
b0 Q
b11 T
b11000000000000000000000000000000000000000000 V
b0 W
b11 Z
b0 [
b11000000000000000000000000000000000000000000 \
b0 ]
b11000000000000000000000000000 _
b0 `
b0 a
b0 b
b0 d
b0 e
b11000000000000000000000000000000000000000000001001100000000000000000000000000001000 1
b11000000000000000000000000000000000000000000 4
b11000000000000000000000000000000000000000000 5
b0 6
b11 9
b11000000000000000000000000000000000000000000 ;
b0 <
b11 ?
b0 @
b11000000000000000000000000000000000000000000 A
b0 B
b11000000000000000000000000000 D
b0 E
b0 F
b0 G
b0 I
b0 J
b11 >"
b0 ="
b0 <"
b1 f"
1e"
0c"
0_"
1`"
0)"
1,"
0z!
0l
0j
0,
0(
0x!
0i
0'
0+
0;"
b0 f"
0Q#
0$
0#
08!
0("
0'"
#20000000
0!
#25000000
1!
b10 d"
0E#
b11 B#
b1 L#
b1 I#
b1 J#
0Z!
1c"
1D#
b1 d!
b1 e!
1_"
0Y!
b0 s!
1)"
0u!
b1 c!
1z!
0t!
b1 -"
b0 o!
b0 p!
1l
b1 b"
1,
1(
b11111111111111111111111111111101 g"
1'
1+
1Q#
1$
1#
18!
1x!
1("
1'"
1j
1;"
1i
b1 f"
#30000000
0!
#35000000
1!
b1 d"
1i"
b11000000000000000000000000000000000000000000001001100000000000000000000000000001000 j"
b1000 k"
b11000000000000000000000000000000000000000000 m"
b11000000000000000000000000000000000000000000 n"
b0 o"
b11 r"
b11000000000000000000000000000000000000000000 t"
b0 u"
b11 x"
b11000000000000000000000000000000000000000000 z"
b0 {"
b11000000000000000000000000000 }"
b0 !#
b0 "#
b0 $#
b0 %#
b10 B#
b11 L#
b1100 k
1Z!
b110000000000000001001100000000000000000000000000001100 o
b1100 p
0c"
0h"
b1100 &
0j!
0i!
1Y!
0k!
b11000000000000000000000000000000000000000000001001100000000000000000000000000001100 L
b1100 M
b11000000000000000000000000000000000000000000001001100000000000000000000000000001000 9!
b1000 :!
b11000000000000000000000000000000000000000000 <!
b11000000000000000000000000000000000000000000 =!
b0 >!
b11 A!
b11000000000000000000000000000000000000000000 C!
b0 D!
b11 G!
b0 H!
b11000000000000000000000000000000000000000000 I!
b0 J!
b11000000000000000000000000000 L!
b0 M!
b0 N!
b0 O!
b0 Q!
b0 R!
b1100 %
0_"
b0 X!
b11 N#
b1 s!
b11000000000000000000000000000000000000000000001001100000000000000000000000000001100 1
b1100 2
0."
b11 O#
1u!
0/"
sADDSUB V!
b11 U!
0)"
04"
b1010000000100011 R#
b11 r!
b0 s!
1t!
0z!
0a"
b1 o!
b1 p!
0l
b1010000000100011 *
0j
0m!
b11111111111111111111111111111111 g"
b1100000 o!
b0 p!
b11 q!
0,
b1010000000100011 )
0x!
0(
0l!
0i
0'
b101000000010001100000000000000000000000000001100 o
sMEMORYSTORE q
b101000000 r
b101000000 s
b10 u
b1 v
b0 w
b101000000 y
b10 {
b1 |
b0 }
b101000000 ~
b1010 "!
b101000000 #!
b10 %!
b1 &!
b0 '!
b101000000 )!
b1010 +!
b101000000 ,!
b10 .!
b1 /!
b0 0!
b101000000 2!
b10 4!
b1 5!
b0 6!
0+
0;"
0y!
b0 f"
b1 $"
b10 &"
b10010001100000000000000000000000000001100 L
sMEMORYSTORE N
b10 O
b10 P
b10 Q
b0 T
b10 V
b10 W
b0 Z
b10 \
b10 ]
b0 _
b10 a
b10 b
b10 d
b10 e
0Q#
b0 %"
b1 ="
0$
b0 >"
b10010001100000000000000000000000000001100 1
sMEMORYSTORE 3
b10 4
b10 5
b10 6
b0 9
b10 ;
b10 <
b0 ?
b10 A
b10 B
b0 D
b10 F
b10 G
b10 I
b10 J
1+"
1*"
0e"
0#
1c"
1_"
0`"
08!
0'"
0+"
0,"
0*"
0("
1)"
#40000000
0!
#45000000
1!
1E#
b11 B#
b10 L#
b1100000 F#
b11 H#
0Z!
0D#
1j!
1k!
b1100000 d!
b0 e!
b11 f!
1i!
0Y!
b0 r!
b0 c!
1."
b11 g!
0u!
1/"
14"
b11 0"
b0 -"
0t!
1a"
b0 o!
b0 q!
1m!
b0 b"
b11111111111111111111111111111101 g"
b11111111111111111111111111111110 g"
1l!
#50000000
0!
#55000000
1!
b11 ?"
b11 L#
b0 d"
b11 }!
1e"
0j!
0k!
0i!
1`"
b1100000000000000000000000000000000000000000000010010001100000000000000000000000000001100 L
b1100000000000000000000000000000000000000000000010 O
b1100000000000000000000000000000000000000000000010 P
b1100000 T
b1100000000000000000000000000000000000000000000010 V
b1100000 Z
b1100000000000000000000000000000000000000000000010 \
b11 `
0/"
b1100000000000000000000000000000000000000000000010010001100000000000000000000000000001100 1
b1100000000000000000000000000000000000000000000010 4
b1100000000000000000000000000000000000000000000010 5
b1100000 9
b1100000000000000000000000000000000000000000000010 ;
b1100000 ?
b1100000000000000000000000000000000000000000000010 A
b11 E
0."
1,"
04"
0a"
1z!
1l
0m!
b11111111111111111111111111111111 g"
1,
1(
0l!
1'
1+
1Q#
1$
1#
18!
1j
1'"
1+"
1*"
1("
1i
#60000000
0!
#65000000
1!
0i"
b1 B#
b1100000000000000000000000000000000000000000000010010001100000000000000000000000000001100 '#
b1100 (#
sMEMORYSTORE )#
b1100000000000000000000000000000000000000000000010 *#
b1100000000000000000000000000000000000000000000010 +#
b10 ,#
b1100000 /#
b1100000000000000000000000000000000000000000000010 1#
b10 2#
b1100000 5#
b0 6#
b1100000000000000000000000000000000000000000000010 7#
b10 8#
b11 ;#
b10 <#
b10 =#
b10 ?#
b10 @#
b10000 k
1Z!
1h"
b10000 &
b101000000010001100000000000000000000000000010000 o
b10000 p
b1100000000000000000000000000000000000000000000010010001100000000000000000000000000001100 9!
b1100 :!
sMEMORYSTORE ;!
b1100000000000000000000000000000000000000000000010 <!
b1100000000000000000000000000000000000000000000010 =!
b10 >!
b1100000 A!
b1100000000000000000000000000000000000000000000010 C!
b10 D!
b1100000 G!
b1100000000000000000000000000000000000000000000010 I!
b10 J!
b0 L!
b11 M!
b10 N!
b10 O!
b10 Q!
b10 R!
b1100000000000000000000000000000000000000000000010010001100000000000000000000000000010000 L
b10000 M
b10000 %
1Y!
1_!
b100 N#
1`!
0Y!
0[!
b11 r!
1^!
b1100000000000000000000000000000000000000000000010010001100000000000000000000000000010000 1
b10000 2
b100 O#
1u!
sNONE n!
b11 ]!
b0 U!
b0 R#
b0 r!
0u!
b0 *
b0 )
b10000 o
s[unknown] q
b0 r
b0 s
b0 u
b0 v
b0 y
b0 {
b0 |
b0 ~
b0 "!
b0 #!
b0 %!
b0 &!
b0 )!
b0 +!
b0 ,!
b0 .!
b0 /!
b0 2!
b0 4!
b0 5!
b0 $"
1{!
b0 &"
1~!
1""
b10000 L
s[unknown] N
b0 O
b0 P
b0 Q
b0 T
b0 V
b0 W
b0 Z
b0 \
b0 ]
b0 `
b0 a
b0 b
b0 d
b0 e
1!"
0l
b0 0"
b0 ="
0j
0'"
b10000 1
s[unknown] 3
b0 4
b0 5
b0 6
b0 9
b0 ;
b0 <
b0 ?
b0 A
b0 B
b0 E
b0 F
b0 G
b0 I
b0 J
b11 |!
0+"
0*"
0("
01"
0,
0(
0i
0'
0+
0Q#
0$
0#
08!
1a!
1[!
#70000000
0!
#75000000
1!
b11 B#
0Z!
0_!
0`!
0a!
0[!
#80000000
