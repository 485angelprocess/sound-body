/* Generated by Amaranth Yosys 0.40 (PyPI ver 0.40.0.0.post101, git sha1 a1bb0255d) */

(* top =  1  *)
(* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\risc_build.py:32" *)
(* generator = "Amaranth" *)
module risc_project(axi_wready, axi_arready, axi_rdata, axi_rvalid, axi_bresp, axi_bvalid, prog_awready, prog_wready, prog_arready, prog_rdata, prog_rvalid, prog_bresp, prog_bvalid, direct_awready, direct_wready, direct_arready, direct_rdata, direct_rvalid, direct_bresp, direct_bvalid, rx
, clk, rst, axi_awvalid, axi_awaddr, axi_wdata, axi_wvalid, axi_arvalid, axi_araddr, axi_rready, axi_bready, prog_awvalid, prog_awaddr, prog_wdata, prog_wvalid, prog_arvalid, prog_araddr, prog_rready, prog_bready, direct_awvalid, direct_awaddr, direct_wdata
, direct_wvalid, direct_arvalid, direct_araddr, direct_rready, direct_bready, tx, periph_resetn, axi_awready);
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  wire a_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] a_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  wire a_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] a_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  wire a_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] a_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire a_w_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:110" *)
  output [31:0] axi_araddr;
  wire [31:0] axi_araddr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:115" *)
  wire [31:0] \axi_araddr$136 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:115" *)
  wire [31:0] \axi_araddr$92 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:114" *)
  input axi_arready;
  wire axi_arready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:114" *)
  wire \axi_arready$137 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:114" *)
  wire \axi_arready$93 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  output axi_arvalid;
  wire axi_arvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:113" *)
  wire \axi_arvalid$138 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:113" *)
  wire \axi_arvalid$94 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:110" *)
  output [31:0] axi_awaddr;
  wire [31:0] axi_awaddr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:109" *)
  wire [31:0] \axi_awaddr$139 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:109" *)
  wire [31:0] \axi_awaddr$95 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:108" *)
  input axi_awready;
  wire axi_awready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:108" *)
  wire \axi_awready$140 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:108" *)
  wire \axi_awready$96 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  output axi_awvalid;
  wire axi_awvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:107" *)
  wire \axi_awvalid$141 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:107" *)
  wire \axi_awvalid$97 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  output axi_bready;
  wire axi_bready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:120" *)
  wire \axi_bready$142 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:120" *)
  wire \axi_bready$98 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:119" *)
  input [1:0] axi_bresp;
  wire [1:0] axi_bresp;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:119" *)
  wire [1:0] \axi_bresp$143 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:119" *)
  wire [1:0] \axi_bresp$99 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:121" *)
  input axi_bvalid;
  wire axi_bvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:121" *)
  wire \axi_bvalid$100 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:121" *)
  wire \axi_bvalid$144 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:116" *)
  input [31:0] axi_rdata;
  wire [31:0] axi_rdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:116" *)
  wire [31:0] \axi_rdata$101 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:116" *)
  wire [31:0] \axi_rdata$145 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  output axi_rready;
  wire axi_rready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:118" *)
  wire \axi_rready$102 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:118" *)
  wire \axi_rready$146 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:117" *)
  input axi_rvalid;
  wire axi_rvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:117" *)
  wire \axi_rvalid$103 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:117" *)
  wire \axi_rvalid$147 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:110" *)
  output [31:0] axi_wdata;
  wire [31:0] axi_wdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:110" *)
  wire [31:0] \axi_wdata$104 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:110" *)
  wire [31:0] \axi_wdata$148 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:112" *)
  input axi_wready;
  wire axi_wready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:112" *)
  wire \axi_wready$105 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:112" *)
  wire \axi_wready$149 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  output axi_wvalid;
  wire axi_wvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:111" *)
  wire \axi_wvalid$106 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:111" *)
  wire \axi_wvalid$150 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  wire b_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] b_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  wire b_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] b_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  wire b_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] b_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire b_w_en;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:84" *)
  wire [7:0] command_tdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:86" *)
  wire command_tready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:85" *)
  wire command_tvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  wire consume_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] consume_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  wire consume_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] consume_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  wire consume_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:84" *)
  wire [7:0] consume_tdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:86" *)
  wire consume_tready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:85" *)
  wire consume_tvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] consume_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire consume_w_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  wire debug_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] debug_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  wire debug_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] debug_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  wire debug_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] debug_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire debug_w_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:109" *)
  output [31:0] direct_araddr;
  wire [31:0] direct_araddr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:114" *)
  input direct_arready;
  wire direct_arready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:113" *)
  output direct_arvalid;
  wire direct_arvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:109" *)
  output [31:0] direct_awaddr;
  wire [31:0] direct_awaddr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:108" *)
  input direct_awready;
  wire direct_awready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:107" *)
  output direct_awvalid;
  wire direct_awvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:120" *)
  output direct_bready;
  wire direct_bready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:119" *)
  input [1:0] direct_bresp;
  wire [1:0] direct_bresp;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:121" *)
  input direct_bvalid;
  wire direct_bvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:116" *)
  input [31:0] direct_rdata;
  wire [31:0] direct_rdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:118" *)
  output direct_rready;
  wire direct_rready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:117" *)
  input direct_rvalid;
  wire direct_rvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  output [31:0] direct_wdata;
  wire [31:0] direct_wdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:112" *)
  input direct_wready;
  wire direct_wready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:111" *)
  output direct_wvalid;
  wire direct_wvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:29" *)
  output periph_resetn;
  wire periph_resetn;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  wire produce_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] produce_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  wire produce_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] produce_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  wire produce_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:84" *)
  wire [7:0] produce_tdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:86" *)
  wire produce_tready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:85" *)
  wire produce_tvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] produce_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire produce_w_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  wire prog_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] prog_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:109" *)
  output [31:0] prog_araddr;
  wire [31:0] prog_araddr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:114" *)
  input prog_arready;
  wire prog_arready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:113" *)
  output prog_arvalid;
  wire prog_arvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:109" *)
  output [31:0] prog_awaddr;
  wire [31:0] prog_awaddr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:108" *)
  input prog_awready;
  wire prog_awready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:107" *)
  output prog_awvalid;
  wire prog_awvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:120" *)
  output prog_bready;
  wire prog_bready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:119" *)
  input [1:0] prog_bresp;
  wire [1:0] prog_bresp;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:121" *)
  input prog_bvalid;
  wire prog_bvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  wire prog_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] prog_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:116" *)
  input [31:0] prog_rdata;
  wire [31:0] prog_rdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:118" *)
  output prog_rready;
  wire prog_rready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:117" *)
  input prog_rvalid;
  wire prog_rvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  wire prog_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] prog_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire prog_w_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:110" *)
  output [31:0] prog_wdata;
  wire [31:0] prog_wdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:112" *)
  input prog_wready;
  wire prog_wready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:111" *)
  output prog_wvalid;
  wire prog_wvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:84" *)
  wire [7:0] reply_tdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:86" *)
  wire reply_tready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:85" *)
  wire reply_tvalid;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:105" *)
  input rx;
  wire rx;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:105" *)
  wire \rx$51 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:29" *)
  wire soft_reset;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:18" *)
  output tx;
  wire tx;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:18" *)
  wire \tx$50 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  wire wish_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  wire \wish_ack$123 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] wish_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] \wish_addr$124 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  wire wish_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  wire \wish_cyc$126 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] wish_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] \wish_r_data$129 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  wire wish_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  wire \wish_stb$130 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] wish_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] \wish_w_data$132 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire wish_w_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire \wish_w_en$134 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\risc_build.py:44" *)
  \risc_project.bridge  bridge (
    .clk(clk),
    .command_tdata(command_tdata),
    .command_tready(produce_tready),
    .command_tvalid(command_tvalid),
    .produce_ack(produce_ack),
    .produce_addr(consume_addr),
    .produce_cyc(consume_cyc),
    .produce_r_data(produce_r_data),
    .produce_stb(consume_stb),
    .produce_w_data(direct_wdata),
    .produce_w_en(consume_w_en),
    .reply_tdata(consume_tdata),
    .reply_tready(reply_tready),
    .reply_tvalid(consume_tvalid),
    .rst(rst),
    .soft_reset(periph_resetn)
  );
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\risc_build.py:53" *)
  \risc_project.bridge_sw  bridge_sw (
    .\0_address (direct_awaddr),
    .a_ack(a_ack),
    .a_cyc(debug_cyc),
    .a_r_data(a_r_data),
    .a_stb(debug_stb),
    .a_w_data(direct_wdata),
    .a_w_en(consume_w_en),
    .b_ack(b_ack),
    .b_cyc(wish_cyc),
    .b_r_data(direct_rdata),
    .b_stb(wish_stb),
    .consume_ack(produce_ack),
    .consume_addr(consume_addr),
    .consume_cyc(consume_cyc),
    .consume_r_data(produce_r_data),
    .consume_stb(consume_stb)
  );
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\risc_build.py:50" *)
  \risc_project.bridge_to_axi  bridge_to_axi (
    .axi_arready(direct_arready),
    .axi_arvalid(direct_arvalid),
    .axi_awaddr(direct_awaddr),
    .axi_awready(direct_awready),
    .axi_awvalid(direct_awvalid),
    .axi_bready(direct_bready),
    .axi_bvalid(direct_bvalid),
    .axi_rready(direct_rready),
    .axi_rvalid(direct_rvalid),
    .axi_wdata(direct_wdata),
    .axi_wready(direct_wready),
    .axi_wvalid(direct_wvalid),
    .clk(clk),
    .rst(rst),
    .wish_ack(b_ack),
    .wish_cyc(wish_cyc),
    .wish_r_data(direct_rdata),
    .wish_stb(wish_stb),
    .wish_w_en(consume_w_en)
  );
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\risc_build.py:66" *)
  \risc_project.core  core (
    .clk(clk),
    .debug_ack(a_ack),
    .debug_addr(consume_addr),
    .debug_cyc(debug_cyc),
    .debug_r_data(a_r_data),
    .debug_stb(debug_stb),
    .debug_w_data(direct_wdata),
    .debug_w_en(consume_w_en),
    .prog_ack(prog_ack),
    .prog_addr(prog_awaddr),
    .prog_cyc(\wish_cyc$126 ),
    .prog_r_data(prog_rdata),
    .prog_stb(\wish_stb$130 ),
    .rst(rst)
  );
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\risc_build.py:71" *)
  \risc_project.prog_to_axi  prog_to_axi (
    .axi_arready(prog_arready),
    .axi_arvalid(prog_arvalid),
    .axi_awaddr(prog_awaddr),
    .axi_awready(prog_awready),
    .axi_awvalid(prog_awvalid),
    .axi_bready(prog_bready),
    .axi_bvalid(prog_bvalid),
    .axi_rready(prog_rready),
    .axi_rvalid(prog_rvalid),
    .axi_wready(prog_wready),
    .axi_wvalid(prog_wvalid),
    .clk(clk),
    .rst(rst),
    .wish_ack(prog_ack),
    .wish_cyc(\wish_cyc$126 ),
    .wish_r_data(prog_rdata),
    .wish_stb(\wish_stb$130 )
  );
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\risc_build.py:36" *)
  \risc_project.uart_rx  uart_rx (
    .clk(clk),
    .produce_tdata(command_tdata),
    .produce_tvalid(command_tvalid),
    .r_en(produce_tready),
    .rst(rst),
    .rx(rx)
  );
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\risc_build.py:35" *)
  \risc_project.uart_tx  uart_tx (
    .clk(clk),
    .consume_tready(reply_tready),
    .rst(rst),
    .tx(tx),
    .w_data(consume_tdata),
    .w_en(consume_tvalid)
  );
  assign \tx$50  = tx;
  assign \rx$51  = rx;
  assign reply_tdata = consume_tdata;
  assign consume_tready = reply_tready;
  assign reply_tvalid = consume_tvalid;
  assign produce_tdata = command_tdata;
  assign command_tready = produce_tready;
  assign produce_tvalid = command_tvalid;
  assign consume_ack = produce_ack;
  assign produce_addr = consume_addr;
  assign produce_cyc = consume_cyc;
  assign consume_r_data = produce_r_data;
  assign produce_stb = consume_stb;
  assign consume_w_data = direct_wdata;
  assign produce_w_data = direct_wdata;
  assign produce_w_en = consume_w_en;
  assign wish_ack = b_ack;
  assign wish_addr = direct_awaddr;
  assign b_addr = direct_awaddr;
  assign b_cyc = wish_cyc;
  assign b_r_data = direct_rdata;
  assign wish_r_data = direct_rdata;
  assign b_stb = wish_stb;
  assign wish_w_data = direct_wdata;
  assign b_w_data = direct_wdata;
  assign wish_w_en = consume_w_en;
  assign b_w_en = consume_w_en;
  assign \axi_araddr$92  = direct_awaddr;
  assign \axi_arready$93  = direct_arready;
  assign \axi_arvalid$94  = direct_arvalid;
  assign \axi_awaddr$95  = direct_awaddr;
  assign \axi_awready$96  = direct_awready;
  assign \axi_awvalid$97  = direct_awvalid;
  assign \axi_bready$98  = direct_bready;
  assign \axi_bresp$99  = direct_bresp;
  assign \axi_bvalid$100  = direct_bvalid;
  assign \axi_rdata$101  = direct_rdata;
  assign \axi_rready$102  = direct_rready;
  assign \axi_rvalid$103  = direct_rvalid;
  assign \axi_wdata$104  = direct_wdata;
  assign \axi_wready$105  = direct_wready;
  assign \axi_wvalid$106  = direct_wvalid;
  assign soft_reset = periph_resetn;
  assign debug_ack = a_ack;
  assign debug_addr = consume_addr;
  assign a_addr = consume_addr;
  assign a_cyc = debug_cyc;
  assign debug_r_data = a_r_data;
  assign a_stb = debug_stb;
  assign debug_w_data = direct_wdata;
  assign a_w_data = direct_wdata;
  assign debug_w_en = consume_w_en;
  assign a_w_en = consume_w_en;
  assign \wish_ack$123  = prog_ack;
  assign \wish_addr$124  = prog_awaddr;
  assign prog_addr = prog_awaddr;
  assign prog_cyc = \wish_cyc$126 ;
  assign prog_r_data = prog_rdata;
  assign \wish_r_data$129  = prog_rdata;
  assign prog_stb = \wish_stb$130 ;
  assign \wish_w_data$132  = 32'd0;
  assign prog_w_data = 32'd0;
  assign \wish_w_en$134  = 1'h0;
  assign prog_w_en = 1'h0;
  assign \axi_araddr$136  = prog_awaddr;
  assign \axi_arready$137  = prog_arready;
  assign \axi_arvalid$138  = prog_arvalid;
  assign \axi_awaddr$139  = prog_awaddr;
  assign \axi_awready$140  = prog_awready;
  assign \axi_awvalid$141  = prog_awvalid;
  assign \axi_bready$142  = prog_bready;
  assign \axi_bresp$143  = prog_bresp;
  assign \axi_bvalid$144  = prog_bvalid;
  assign \axi_rdata$145  = prog_rdata;
  assign \axi_rready$146  = prog_rready;
  assign \axi_rvalid$147  = prog_rvalid;
  assign \axi_wdata$148  = 32'd0;
  assign \axi_wready$149  = prog_wready;
  assign \axi_wvalid$150  = prog_wvalid;
  assign axi_awvalid = 1'h0;
  assign axi_awaddr = 32'd0;
  assign axi_wdata = 32'd0;
  assign axi_wvalid = 1'h0;
  assign axi_arvalid = 1'h0;
  assign axi_araddr = 32'd0;
  assign axi_rready = 1'h0;
  assign axi_bready = 1'h0;
  assign prog_wdata = 32'd0;
  assign prog_araddr = prog_awaddr;
  assign direct_araddr = direct_awaddr;
endmodule

(* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:33" *)
(* generator = "Amaranth" *)
module \risc_project.bridge (rst, reply_tready, command_tvalid, command_tdata, command_tready, produce_stb, produce_cyc, reply_tvalid, reply_tdata, produce_addr, produce_w_data, produce_w_en, soft_reset, produce_ack, produce_r_data, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire [7:0] \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire [3:0] \$15 ;
  wire \$16 ;
  wire [3:0] \$17 ;
  wire \$18 ;
  wire [32:0] \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire [3:0] \$21 ;
  wire \$22 ;
  reg [31:0] \$23 ;
  reg [31:0] \$24 ;
  reg \$25 ;
  reg [31:0] \$26 ;
  reg [1:0] \$27 ;
  reg [2:0] \$28 ;
  reg [2:0] \$29 ;
  wire \$3 ;
  reg [7:0] \$30 ;
  reg [63:0] \$31 ;
  reg \$32 ;
  wire [6:0] \$33 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:39" *)
  reg [63:0] arg = 64'h0000000000000000;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  reg bus_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  wire bus_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  wire bus_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [7:0] bus_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire bus_w_en;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:84" *)
  input [7:0] command_tdata;
  wire [7:0] command_tdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:86" *)
  output command_tready;
  reg command_tready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:85" *)
  input command_tvalid;
  wire command_tvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:36" *)
  reg [2:0] counter = 3'h0;
  (* init = 1'h1 *)
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:41" *)
  wire ext_reset;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64_qbz5n2kfra8p0\\Lib\\contextlib.py:144" *)
  reg [2:0] fsm_state = 3'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:38" *)
  reg [7:0] prefix = 8'h00;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  input produce_ack;
  wire produce_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  output [31:0] produce_addr;
  reg [31:0] produce_addr = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  output produce_cyc;
  reg produce_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  input [31:0] produce_r_data;
  wire [31:0] produce_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  output produce_stb;
  reg produce_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  output [31:0] produce_w_data;
  reg [31:0] produce_w_data = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  output produce_w_en;
  reg produce_w_en = 1'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:84" *)
  output [7:0] reply_tdata;
  reg [7:0] reply_tdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:86" *)
  input reply_tready;
  wire reply_tready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:85" *)
  output reply_tvalid;
  reg reply_tvalid;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:35" *)
  reg [1:0] size = 2'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:41" *)
  output soft_reset;
  reg soft_reset = 1'h1;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:45" *)
  reg [31:0] timer = 32'd0;
  assign \$33  = counter * (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:153" *) 4'h8;
  assign \$1  = arg >> \$33 ;
  assign \$2  = ~ (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:178" *) command_tvalid;
  assign \$3  = \$6  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:178" *) \$2 ;
  assign \$6  = ! (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) fsm_state;
  assign \$7  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 1'h1;
  assign \$8  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 2'h2;
  assign \$9  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 2'h3;
  assign \$10  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 3'h4;
  assign \$11  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 3'h5;
  assign \$12  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 3'h6;
  assign \$13  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 3'h7;
  assign \$14  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:100" *) counter;
  assign \$15  = counter - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:107" *) 1'h1;
  assign \$16  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:112" *) counter;
  assign \$17  = counter - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:115" *) 1'h1;
  assign \$18  = timer == (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:118" *) 27'h5f5e100;
  assign \$19  = timer + (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:124" *) 1'h1;
  assign \$20  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:156" *) counter;
  assign \$21  = counter - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:159" *) 1'h1;
  assign \$22  = reply_tvalid & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:175" *) reply_tready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  always @(posedge clk)
    produce_addr <= \$23 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  always @(posedge clk)
    produce_w_data <= \$24 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  always @(posedge clk)
    produce_w_en <= \$25 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:45" *)
  always @(posedge clk)
    timer <= \$26 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:35" *)
  always @(posedge clk)
    size <= \$27 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:36" *)
  always @(posedge clk)
    counter <= \$28 ;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64_qbz5n2kfra8p0\\Lib\\contextlib.py:144" *)
  always @(posedge clk)
    fsm_state <= \$29 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:38" *)
  always @(posedge clk)
    prefix <= \$30 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:39" *)
  always @(posedge clk)
    arg <= \$31 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\serial_to_wishbone.py:41" *)
  always @(posedge clk)
    soft_reset <= \$32 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    command_tready = 1'h0;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      3'h0:
          command_tready = 1'h1;
      3'h1:
          command_tready = 1'h1;
      3'h5:
          command_tready = 1'h1;
      3'h6:
          /* empty */;
      3'h2:
          /* empty */;
      3'h7:
          /* empty */;
      3'h4:
          /* empty */;
      3'h3:
          command_tready = reply_tready;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    produce_stb = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          produce_stb = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    produce_cyc = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          produce_cyc = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    reply_tvalid = 1'h0;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          /* empty */;
      3'h2:
          reply_tvalid = 1'h1;
      3'h7:
          reply_tvalid = 1'h1;
      3'h4:
          reply_tvalid = 1'h1;
      3'h3:
          reply_tvalid = command_tvalid;
    endcase
    if (\$3 ) begin
      if (\$5 ) begin
        reply_tvalid = 1'h1;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    reply_tdata = 8'h00;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          /* empty */;
      3'h2:
          reply_tdata = prefix;
      3'h7:
          reply_tdata = \$1 ;
      3'h4:
          reply_tdata = 8'h0a;
      3'h3:
          reply_tdata = command_tdata;
    endcase
    if (\$3 ) begin
      if (\$5 ) begin
        reply_tdata = 8'h00;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    bus_ack = 1'h0;
    if (\$3 ) begin
      if (\$5 ) begin
        bus_ack = reply_tready;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$23  = produce_addr;
    casez (fsm_state)
      3'h0:
          \$23  = 32'd0;
      3'h1:
          if (command_tvalid) begin
            casez (counter)
              3'h0:
                  \$23 [7:0] = command_tdata;
              3'h1:
                  \$23 [15:8] = command_tdata;
              3'h2:
                  \$23 [23:16] = command_tdata;
              3'h3:
                  \$23 [31:24] = command_tdata;
            endcase
          end
    endcase
    if (rst) begin
      \$23  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$24  = produce_w_data;
    casez (fsm_state)
      3'h0:
          \$24  = 32'd0;
      3'h1:
          /* empty */;
      3'h5:
          if (command_tvalid) begin
            casez (counter)
              3'h0:
                  \$24 [7:0] = command_tdata;
              3'h1:
                  \$24 [15:8] = command_tdata;
              3'h2:
                  \$24 [23:16] = command_tdata;
              3'h3:
                  \$24 [31:24] = command_tdata;
            endcase
          end
    endcase
    if (rst) begin
      \$24  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$25  = produce_w_en;
    casez (fsm_state)
      3'h0:
        begin
          \$25  = 1'h0;
          if (command_tvalid) begin
            casez (command_tdata)
              8'h77:
                  \$25  = 1'h1;
              8'h57:
                  \$25  = 1'h1;
            endcase
          end
        end
      3'h1:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          if (produce_ack) begin
            if (produce_w_en) begin
              \$25  = 1'h0;
            end
          end
    endcase
    if (rst) begin
      \$25  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$26  = timer;
    casez (fsm_state)
      3'h0:
          \$26  = 32'd0;
      3'h1:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
          (* full_case = 32'd1 *)
          if (\$18 ) begin
          end else begin
            \$26  = \$19 [31:0];
          end
    endcase
    if (rst) begin
      \$26  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$27  = size;
    casez (fsm_state)
      3'h0:
          if (command_tvalid) begin
            casez (command_tdata)
              8'h77:
                  \$27  = 2'h0;
              8'h57:
                  \$27  = 2'h3;
              8'h72:
                  \$27  = 2'h0;
              8'h52:
                  \$27  = 2'h3;
            endcase
          end
    endcase
    if (rst) begin
      \$27  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$28  = counter;
    casez (fsm_state)
      3'h0:
          if (command_tvalid) begin
            (* full_case = 32'd1 *)
            casez (command_tdata)
              8'h77:
                  \$28  = 3'h0;
              8'h57:
                  \$28  = 3'h3;
              8'h72:
                  \$28  = 3'h0;
              8'h52:
                  \$28  = 3'h3;
              8'h49:
                  \$28  = 3'h0;
              8'h65:
                  /* empty */;
              8'h0a:
                  /* empty */;
              8'h78:
                  /* empty */;
              default:
                  \$28  = 3'h0;
            endcase
          end
      3'h1:
          if (command_tvalid) begin
            (* full_case = 32'd1 *)
            if (\$14 ) begin
              \$28  = { 1'h0, size };
            end else begin
              \$28  = \$15 [2:0];
            end
          end
      3'h5:
          if (command_tvalid) begin
            (* full_case = 32'd1 *)
            if (\$16 ) begin
            end else begin
              \$28  = \$17 [2:0];
            end
          end
      3'h6:
        begin
          if (\$18 ) begin
            \$28  = 3'h3;
          end
          if (produce_ack) begin
            (* full_case = 32'd1 *)
            if (produce_w_en) begin
              \$28  = 3'h7;
            end else begin
              \$28  = 3'h7;
            end
          end
        end
      3'h2:
          /* empty */;
      3'h7:
          if (reply_tready) begin
            (* full_case = 32'd1 *)
            if (\$20 ) begin
            end else begin
              \$28  = \$21 [2:0];
            end
          end
    endcase
    if (rst) begin
      \$28  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$29  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      3'h0:
          if (command_tvalid) begin
            (* full_case = 32'd1 *)
            casez (command_tdata)
              8'h77:
                  \$29  = 3'h1;
              8'h57:
                  \$29  = 3'h1;
              8'h72:
                  \$29  = 3'h1;
              8'h52:
                  \$29  = 3'h1;
              8'h49:
                  \$29  = 3'h2;
              8'h65:
                  \$29  = 3'h3;
              8'h0a:
                  \$29  = 3'h4;
              8'h78:
                  /* empty */;
              default:
                  \$29  = 3'h2;
            endcase
          end
      3'h1:
          if (command_tvalid) begin
            if (\$14 ) begin
              (* full_case = 32'd1 *)
              if (produce_w_en) begin
                \$29  = 3'h5;
              end else begin
                \$29  = 3'h6;
              end
            end
          end
      3'h5:
          if (command_tvalid) begin
            if (\$16 ) begin
              \$29  = 3'h6;
            end
          end
      3'h6:
        begin
          if (\$18 ) begin
            \$29  = 3'h2;
          end
          if (produce_ack) begin
            \$29  = 3'h2;
          end
        end
      3'h2:
          if (reply_tready) begin
            \$29  = 3'h7;
          end
      3'h7:
          if (reply_tready) begin
            if (\$20 ) begin
              \$29  = 3'h0;
            end
          end
      3'h4:
          if (reply_tready) begin
            \$29  = 3'h0;
          end
      3'h3:
          if (\$22 ) begin
            \$29  = 3'h0;
          end
    endcase
    if (rst) begin
      \$29  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$30  = prefix;
    casez (fsm_state)
      3'h0:
          if (command_tvalid) begin
            (* full_case = 32'd1 *)
            casez (command_tdata)
              8'h77:
                  /* empty */;
              8'h57:
                  /* empty */;
              8'h72:
                  /* empty */;
              8'h52:
                  /* empty */;
              8'h49:
                  \$30  = 8'h49;
              8'h65:
                  /* empty */;
              8'h0a:
                  /* empty */;
              8'h78:
                  /* empty */;
              default:
                  \$30  = 8'h25;
            endcase
          end
      3'h1:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
        begin
          if (\$18 ) begin
            \$30  = 8'h54;
          end
          if (produce_ack) begin
            (* full_case = 32'd1 *)
            if (produce_w_en) begin
              \$30  = 8'h57;
            end else begin
              \$30  = 8'h52;
            end
          end
        end
    endcase
    if (rst) begin
      \$30  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$31  = arg;
    casez (fsm_state)
      3'h0:
          if (command_tvalid) begin
            (* full_case = 32'd1 *)
            casez (command_tdata)
              8'h77:
                  /* empty */;
              8'h57:
                  /* empty */;
              8'h72:
                  /* empty */;
              8'h52:
                  /* empty */;
              8'h49:
                  \$31  = 64'h0000000000000044;
              8'h65:
                  /* empty */;
              8'h0a:
                  /* empty */;
              8'h78:
                  /* empty */;
              default:
                  \$31  = { 56'h00000000000000, command_tdata };
            endcase
          end
      3'h1:
          /* empty */;
      3'h5:
          /* empty */;
      3'h6:
        begin
          if (\$18 ) begin
            \$31  = { 32'h00000000, produce_addr };
          end
          if (produce_ack) begin
            (* full_case = 32'd1 *)
            if (produce_w_en) begin
              \$31 [31:0] = produce_w_data;
              \$31 [63:32] = produce_addr;
            end else begin
              \$31 [31:0] = produce_r_data;
              \$31 [63:32] = produce_addr;
            end
          end
        end
    endcase
    if (rst) begin
      \$31  = 64'h0000000000000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$32  = soft_reset;
    casez (fsm_state)
      3'h0:
          if (command_tvalid) begin
            casez (command_tdata)
              8'h77:
                  /* empty */;
              8'h57:
                  /* empty */;
              8'h72:
                  /* empty */;
              8'h52:
                  /* empty */;
              8'h49:
                  /* empty */;
              8'h65:
                  /* empty */;
              8'h0a:
                  /* empty */;
              8'h78:
                  \$32  = 1'h0;
            endcase
          end
    endcase
    if (rst) begin
      \$32  = 1'h1;
    end
  end
  assign ext_reset = soft_reset;
  assign bus_stb = 1'h0;
  assign bus_cyc = 1'h0;
  assign bus_w_en = 1'h0;
  assign bus_w_data = 8'h00;
  assign \$4  = 1'h0;
  assign \$5  = 1'h0;
endmodule

(* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\switch.py:171" *)
(* generator = "Amaranth" *)
module \risc_project.bridge_sw (\0_address , consume_stb, consume_cyc, consume_addr, a_w_data, a_w_en, b_ack, a_stb, a_cyc, consume_ack, consume_r_data, b_stb, b_cyc, a_ack, a_r_data, b_r_data);
  reg \$auto$verilog_backend.cc:2352:dump_module$2  = 0;
  wire \$1 ;
  wire [32:0] \$2 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  output [31:0] \0_address ;
  wire [31:0] \0_address ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  input a_ack;
  wire a_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] a_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  output a_cyc;
  reg a_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  input [31:0] a_r_data;
  wire [31:0] a_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  output a_stb;
  reg a_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  input [31:0] a_w_data;
  wire [31:0] a_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  input a_w_en;
  wire a_w_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  input b_ack;
  wire b_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] b_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  output b_cyc;
  reg b_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  input [31:0] b_r_data;
  wire [31:0] b_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  output b_stb;
  reg b_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] b_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire b_w_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  output consume_ack;
  reg consume_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  input [31:0] consume_addr;
  wire [31:0] consume_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  input consume_cyc;
  wire consume_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  output [31:0] consume_r_data;
  reg [31:0] consume_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  input consume_stb;
  wire consume_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] consume_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire consume_w_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\switch.py:174" *)
  reg select;
  assign \$1  = consume_addr < (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\switch.py:176" *) 9'h100;
  assign \$2  = consume_addr - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\switch.py:188" *) 9'h100;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    b_stb = 1'h0;
    (* full_case = 32'd1 *)
    casez (select)
      1'h0:
          /* empty */;
      1'h1:
          b_stb = consume_stb;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    b_cyc = 1'h0;
    (* full_case = 32'd1 *)
    casez (select)
      1'h0:
          /* empty */;
      1'h1:
          b_cyc = consume_cyc;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      select = 1'h0;
    end else begin
      select = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    a_stb = 1'h0;
    casez (select)
      1'h0:
          a_stb = consume_stb;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    a_cyc = 1'h0;
    casez (select)
      1'h0:
          a_cyc = consume_cyc;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    (* full_case = 32'd1 *)
    casez (select)
      1'h0:
          consume_ack = a_ack;
      1'h1:
          consume_ack = b_ack;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    (* full_case = 32'd1 *)
    casez (select)
      1'h0:
          consume_r_data = a_r_data;
      1'h1:
          consume_r_data = b_r_data;
    endcase
  end
  assign a_addr = consume_addr;
  assign consume_w_en = a_w_en;
  assign consume_w_data = a_w_data;
  assign b_addr = \$2 [31:0];
  assign b_w_en = a_w_en;
  assign b_w_data = a_w_data;
  assign \0_address  = \$2 [31:0];
endmodule

(* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:20" *)
(* generator = "Amaranth" *)
module \risc_project.bridge_to_axi (axi_wready, axi_arready, wish_r_data, axi_rvalid, axi_bvalid, clk, rst, axi_awvalid, axi_wvalid, axi_arvalid, axi_rready, axi_awaddr, axi_wdata, wish_w_en, wish_ack, axi_bready, wish_stb, wish_cyc, axi_awready);
  reg \$auto$verilog_backend.cc:2352:dump_module$3  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire \$2 ;
  reg \$20 ;
  reg \$21 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:22" *)
  reg address_written = 1'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:115" *)
  wire [31:0] axi_araddr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:114" *)
  input axi_arready;
  wire axi_arready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:113" *)
  output axi_arvalid;
  wire axi_arvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:115" *)
  input [31:0] axi_awaddr;
  wire [31:0] axi_awaddr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:108" *)
  input axi_awready;
  wire axi_awready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:107" *)
  output axi_awvalid;
  wire axi_awvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:120" *)
  output axi_bready;
  reg axi_bready = 1'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:121" *)
  input axi_bvalid;
  wire axi_bvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:116" *)
  wire [31:0] axi_rdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:118" *)
  output axi_rready;
  wire axi_rready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:117" *)
  input axi_rvalid;
  wire axi_rvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  input [31:0] axi_wdata;
  wire [31:0] axi_wdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:112" *)
  input axi_wready;
  wire axi_wready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:111" *)
  output axi_wvalid;
  wire axi_wvalid;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  output wish_ack;
  reg wish_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] wish_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  input wish_cyc;
  wire wish_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:116" *)
  input [31:0] wish_r_data;
  wire [31:0] wish_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  input wish_stb;
  wire wish_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] wish_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  input wish_w_en;
  wire wish_w_en;
  assign \$1  = wish_w_en & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:32" *) wish_stb;
  assign \$2  = \$1  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:32" *) wish_cyc;
  assign \$3  = ~ (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:32" *) address_written;
  assign axi_awvalid = \$2  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:32" *) \$3 ;
  assign \$4  = wish_w_en & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:33" *) wish_stb;
  assign \$5  = \$4  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:33" *) wish_cyc;
  assign axi_wvalid = \$5  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:33" *) address_written;
  assign \$6  = ~ (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:36" *) wish_w_en;
  assign \$7  = \$6  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:36" *) wish_stb;
  assign \$8  = \$7  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:36" *) wish_cyc;
  assign \$9  = ~ (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:36" *) address_written;
  assign axi_arvalid = \$8  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:36" *) \$9 ;
  assign \$10  = ~ (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:37" *) wish_w_en;
  assign \$11  = \$10  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:37" *) wish_stb;
  assign \$12  = \$11  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:37" *) wish_cyc;
  assign axi_rready = \$12  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:37" *) address_written;
  assign \$13  = axi_wready & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:43" *) axi_wvalid;
  assign \$14  = axi_rready & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:45" *) axi_rvalid;
  assign \$15  = axi_awvalid & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:49" *) axi_awready;
  assign \$16  = axi_arvalid & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:51" *) axi_arready;
  assign \$17  = axi_rvalid & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:55" *) axi_rready;
  assign \$18  = axi_wvalid & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:59" *) axi_wready;
  assign \$19  = axi_bready & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:62" *) axi_bvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:22" *)
  always @(posedge clk)
    address_written <= \$20 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:120" *)
  always @(posedge clk)
    axi_bready <= \$21 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (wish_w_en) begin
      wish_ack = \$13 ;
    end else begin
      wish_ack = \$14 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$20  = address_written;
    if (\$15 ) begin
      \$20  = 1'h1;
    end
    if (\$16 ) begin
      \$20  = 1'h1;
    end
    if (\$17 ) begin
      \$20  = 1'h0;
    end
    if (\$19 ) begin
      \$20  = 1'h0;
    end
    if (rst) begin
      \$20  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$21  = axi_bready;
    if (\$18 ) begin
      \$21  = 1'h1;
    end
    if (\$19 ) begin
      \$21  = 1'h0;
    end
    if (rst) begin
      \$21  = 1'h0;
    end
  end
  assign wish_addr = axi_awaddr;
  assign axi_araddr = axi_awaddr;
  assign wish_w_data = axi_wdata;
  assign axi_rdata = wish_r_data;
endmodule

(* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:494" *)
(* generator = "Amaranth" *)
module \risc_project.core (clk, rst, prog_cyc, prog_stb, debug_addr, debug_w_data, debug_w_en, debug_stb, debug_cyc, debug_ack, debug_r_data, prog_addr, prog_ack, prog_r_data);
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:23" *)
  wire [4:0] aluin_d;
  (* enum_base_type = "AluFunction" *)
  (* enum_value_000 = "ADDSUB" *)
  (* enum_value_001 = "SHIFTLEFT" *)
  (* enum_value_010 = "LESSTHAN" *)
  (* enum_value_011 = "LESSTHANU" *)
  (* enum_value_100 = "XOR" *)
  (* enum_value_101 = "SHIFTRIGHT" *)
  (* enum_value_110 = "OR" *)
  (* enum_value_111 = "AND" *)
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:109" *)
  wire [2:0] aluin_function;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:25" *)
  wire [6:0] aluin_mode;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:21" *)
  wire [31:0] aluin_s1;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:22" *)
  wire [31:0] aluin_s2;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:26" *)
  wire aluin_valid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:33" *)
  wire [4:0] aluout_d;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:34" *)
  wire aluout_error;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:35" *)
  wire aluout_valid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:32" *)
  wire [31:0] aluout_value;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  wire bus_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  wire \bus_ack$21 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] bus_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] \bus_addr$23 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  wire bus_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  wire \bus_cyc$25 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] bus_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] \bus_r_data$27 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  wire bus_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  wire \bus_stb$29 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] bus_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] \bus_w_data$31 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire bus_w_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire \bus_w_en$33 ;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:23" *)
  wire [4:0] consume_d;
  (* enum_base_type = "AluFunction" *)
  (* enum_value_000 = "ADDSUB" *)
  (* enum_value_001 = "SHIFTLEFT" *)
  (* enum_value_010 = "LESSTHAN" *)
  (* enum_value_011 = "LESSTHANU" *)
  (* enum_value_100 = "XOR" *)
  (* enum_value_101 = "SHIFTRIGHT" *)
  (* enum_value_110 = "OR" *)
  (* enum_value_111 = "AND" *)
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:40" *)
  wire [2:0] consume_function;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:25" *)
  wire [6:0] consume_mode;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:21" *)
  wire [31:0] consume_s1;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:22" *)
  wire [31:0] consume_s2;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:26" *)
  wire consume_valid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  output debug_ack;
  wire debug_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  wire \debug_ack$49 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  input [31:0] debug_addr;
  wire [31:0] debug_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] \debug_addr$51 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  input debug_cyc;
  wire debug_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  wire \debug_cyc$53 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  output [31:0] debug_r_data;
  wire [31:0] debug_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] \debug_r_data$55 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  input debug_stb;
  wire debug_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  wire \debug_stb$57 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  input [31:0] debug_w_data;
  wire [31:0] debug_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] \debug_w_data$59 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  input debug_w_en;
  wire debug_w_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire \debug_w_en$61 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:33" *)
  wire [4:0] produce_d;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:34" *)
  wire produce_error;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:35" *)
  wire produce_valid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:32" *)
  wire [31:0] produce_value;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  input prog_ack;
  wire prog_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  wire \prog_ack$35 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  output [31:0] prog_addr;
  wire [31:0] prog_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] \prog_addr$37 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  output prog_cyc;
  wire prog_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  wire \prog_cyc$39 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  input [31:0] prog_r_data;
  wire [31:0] prog_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] \prog_r_data$41 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  output prog_stb;
  wire prog_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  wire \prog_stb$43 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] prog_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] \prog_w_data$45 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire prog_w_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire \prog_w_en$47 ;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:499" *)
  \risc_project.core.alu  alu (
    .clk(clk),
    .consume_d(consume_d),
    .consume_s1(consume_s1),
    .consume_s2(consume_s2),
    .consume_valid(consume_valid),
    .produce_d(aluout_d),
    .produce_error(aluout_error),
    .produce_valid(aluout_valid),
    .produce_value(aluout_value),
    .rst(rst)
  );
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:496" *)
  \risc_project.core.core  core (
    .aluin_d(consume_d),
    .aluin_s1(consume_s1),
    .aluin_s2(consume_s2),
    .aluin_valid(consume_valid),
    .aluout_d(aluout_d),
    .aluout_error(aluout_error),
    .aluout_valid(aluout_valid),
    .aluout_value(aluout_value),
    .bus_addr(bus_addr),
    .bus_cyc(bus_cyc),
    .bus_stb(bus_stb),
    .bus_w_data(bus_w_data),
    .bus_w_en(bus_w_en),
    .clk(clk),
    .debug_ack(debug_ack),
    .debug_addr(debug_addr),
    .debug_cyc(debug_cyc),
    .debug_r_data(debug_r_data),
    .debug_stb(debug_stb),
    .debug_w_data(debug_w_data),
    .debug_w_en(debug_w_en),
    .instruction_fetch(prog_r_data),
    .prog_ack(prog_ack),
    .prog_addr(prog_addr),
    .prog_cyc(prog_cyc),
    .prog_stb(prog_stb),
    .rst(rst)
  );
  assign aluin_d = consume_d;
  assign consume_function = 3'h0;
  assign aluin_function = 3'h0;
  assign consume_mode = 7'h00;
  assign aluin_mode = 7'h00;
  assign aluin_s1 = consume_s1;
  assign aluin_s2 = consume_s2;
  assign aluin_valid = consume_valid;
  assign produce_d = aluout_d;
  assign produce_error = aluout_error;
  assign produce_valid = aluout_valid;
  assign produce_value = aluout_value;
  assign bus_ack = 1'h0;
  assign \bus_ack$21  = 1'h0;
  assign \bus_addr$23  = bus_addr;
  assign \bus_cyc$25  = bus_cyc;
  assign bus_r_data = 32'd0;
  assign \bus_r_data$27  = 32'd0;
  assign \bus_stb$29  = bus_stb;
  assign \bus_w_data$31  = bus_w_data;
  assign \bus_w_en$33  = bus_w_en;
  assign \prog_ack$35  = prog_ack;
  assign \prog_addr$37  = prog_addr;
  assign \prog_cyc$39  = prog_cyc;
  assign \prog_r_data$41  = prog_r_data;
  assign \prog_stb$43  = prog_stb;
  assign prog_w_data = 32'd0;
  assign \prog_w_data$45  = 32'd0;
  assign prog_w_en = 1'h0;
  assign \prog_w_en$47  = 1'h0;
  assign \debug_ack$49  = debug_ack;
  assign \debug_addr$51  = debug_addr;
  assign \debug_cyc$53  = debug_cyc;
  assign \debug_r_data$55  = debug_r_data;
  assign \debug_stb$57  = debug_stb;
  assign \debug_w_data$59  = debug_w_data;
  assign \debug_w_en$61  = debug_w_en;
endmodule

(* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:46" *)
(* generator = "Amaranth" *)
module \risc_project.core.alu (rst, consume_s1, consume_s2, consume_valid, consume_d, produce_valid, produce_d, produce_value, produce_error, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$4  = 0;
  wire [32:0] \$1 ;
  wire [31:0] \$10 ;
  wire [31:0] \$11 ;
  reg \$12 ;
  reg [4:0] \$13 ;
  reg [31:0] \$14 ;
  reg \$15 ;
  wire [32:0] \$2 ;
  wire \$3 ;
  wire [38:0] \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire [31:0] \$7 ;
  wire [31:0] \$8 ;
  wire [31:0] \$9 ;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:23" *)
  input [4:0] consume_d;
  wire [4:0] consume_d;
  (* enum_base_type = "AluFunction" *)
  (* enum_value_000 = "ADDSUB" *)
  (* enum_value_001 = "SHIFTLEFT" *)
  (* enum_value_010 = "LESSTHAN" *)
  (* enum_value_011 = "LESSTHANU" *)
  (* enum_value_100 = "XOR" *)
  (* enum_value_101 = "SHIFTRIGHT" *)
  (* enum_value_110 = "OR" *)
  (* enum_value_111 = "AND" *)
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:40" *)
  wire [2:0] consume_function;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:25" *)
  wire [6:0] consume_mode;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:21" *)
  input [31:0] consume_s1;
  wire [31:0] consume_s1;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:22" *)
  input [31:0] consume_s2;
  wire [31:0] consume_s2;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:26" *)
  input consume_valid;
  wire consume_valid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:33" *)
  output [4:0] produce_d;
  reg [4:0] produce_d = 5'h00;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:34" *)
  output produce_error;
  reg produce_error = 1'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:35" *)
  output produce_valid;
  reg produce_valid = 1'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:32" *)
  output [31:0] produce_value;
  reg [31:0] produce_value = 32'd0;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  assign \$1  = consume_s1 + (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:62" *) consume_s2;
  assign \$2  = consume_s1 - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:67" *) consume_s2;
  assign \$3  = consume_s2 > (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:75" *) 3'h5;
  assign \$4  = consume_s1 << (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:81" *) consume_s2[2:0];
  assign \$5  = consume_s1 < (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:91" *) consume_s2;
  assign \$6  = consume_s1 < (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:101" *) consume_s2;
  assign \$7  = consume_s1 ^ (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:111" *) consume_s2;
  assign \$8  = consume_s1 >> (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:121" *) consume_s2;
  assign \$9  = consume_s1 >> (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:126" *) consume_s2;
  assign \$10  = consume_s1 | (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:138" *) consume_s2;
  assign \$11  = consume_s1 & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:147" *) consume_s2;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:35" *)
  always @(posedge clk)
    produce_valid <= \$12 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:33" *)
  always @(posedge clk)
    produce_d <= \$13 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:32" *)
  always @(posedge clk)
    produce_value <= \$14 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:34" *)
  always @(posedge clk)
    produce_error <= \$15 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$12  = produce_valid;
    if (produce_valid) begin
      \$12  = 1'h0;
    end
    if (consume_valid) begin
      \$12  = 1'h1;
    end
    if (rst) begin
      \$12  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$13  = produce_d;
    if (consume_valid) begin
      \$13  = consume_d;
    end
    if (rst) begin
      \$13  = 5'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$14  = produce_value;
    if (consume_valid) begin
      \$14  = \$1 [31:0];
    end
    if (rst) begin
      \$14  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$15  = produce_error;
    if (rst) begin
      \$15  = 1'h0;
    end
  end
  assign consume_function = 3'h0;
  assign consume_mode = 7'h00;
endmodule

(* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:172" *)
(* generator = "Amaranth" *)
module \risc_project.core.core (clk, rst, prog_cyc, prog_stb, debug_addr, debug_w_data, debug_w_en, debug_stb, debug_cyc, debug_ack, debug_r_data, bus_cyc, bus_stb, bus_addr, bus_w_en, bus_w_data, aluin_s1, aluin_s2, aluin_valid, aluin_d, prog_addr
, aluout_valid, aluout_d, aluout_value, aluout_error, prog_ack, instruction_fetch);
  reg \$auto$verilog_backend.cc:2352:dump_module$5  = 0;
  wire \$1 ;
  wire [18:0] \$10 ;
  wire [33:0] \$11 ;
  wire [34:0] \$12 ;
  reg [31:0] \$13 ;
  reg [31:0] \$14 ;
  wire \$15 ;
  reg [31:0] \$16 ;
  reg [31:0] \$17 ;
  reg [31:0] \$18 ;
  wire \$19 ;
  wire [32:0] \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire [32:0] \$23 ;
  wire \$24 ;
  reg [31:0] \$25 ;
  wire [32:0] \$26 ;
  reg [31:0] \$27 ;
  wire [13:0] \$28 ;
  wire [14:0] \$29 ;
  reg [31:0] \$3 ;
  wire [32:0] \$30 ;
  reg [31:0] \$31 ;
  wire [34:0] \$32 ;
  wire [32:0] \$33 ;
  wire [34:0] \$34 ;
  wire [35:0] \$35 ;
  wire [33:0] \$36 ;
  reg [31:0] \$37 ;
  wire [32:0] \$38 ;
  wire [32:0] \$39 ;
  wire [15:0] \$4 ;
  wire \$40 ;
  wire \$41 ;
  wire \$42 ;
  wire [32:0] \$43 ;
  reg [31:0] \$44 ;
  reg [31:0] \$45 ;
  reg [31:0] \$46 ;
  reg [31:0] \$47 ;
  reg [31:0] \$48 ;
  reg [31:0] \$49 ;
  wire [4:0] \$5 ;
  reg [31:0] \$50 ;
  reg [31:0] \$51 ;
  reg [31:0] \$52 ;
  reg [31:0] \$53 ;
  reg [31:0] \$54 ;
  reg [31:0] \$55 ;
  reg [31:0] \$56 ;
  reg [31:0] \$57 ;
  reg [31:0] \$58 ;
  reg [31:0] \$59 ;
  wire [16:0] \$6 ;
  reg [31:0] \$60 ;
  reg [31:0] \$61 ;
  reg [31:0] \$62 ;
  reg [31:0] \$63 ;
  reg [31:0] \$64 ;
  reg [31:0] \$65 ;
  reg [31:0] \$66 ;
  reg [31:0] \$67 ;
  reg [31:0] \$68 ;
  reg [31:0] \$69 ;
  wire [12:0] \$7 ;
  reg [31:0] \$70 ;
  reg [31:0] \$71 ;
  reg [31:0] \$72 ;
  reg [31:0] \$73 ;
  reg [31:0] \$74 ;
  reg [31:0] \$75 ;
  reg \$76 ;
  reg [1:0] \$77 ;
  reg [31:0] \$78 ;
  reg \$79 ;
  wire [17:0] \$8 ;
  reg \$80 ;
  reg [31:0] \$81 ;
  reg \$82 ;
  reg [31:0] \$83 ;
  reg [31:0] \$84 ;
  reg \$85 ;
  wire [15:0] \$9 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:269" *)
  reg active = 1'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:23" *)
  output [4:0] aluin_d;
  reg [4:0] aluin_d;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:21" *)
  output [31:0] aluin_s1;
  reg [31:0] aluin_s1;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:22" *)
  output [31:0] aluin_s2;
  reg [31:0] aluin_s2;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:26" *)
  output aluin_valid;
  reg aluin_valid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:33" *)
  input [4:0] aluout_d;
  wire [4:0] aluout_d;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:34" *)
  input aluout_error;
  wire aluout_error;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:35" *)
  input aluout_valid;
  wire aluout_valid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\alu.py:32" *)
  input [31:0] aluout_value;
  wire [31:0] aluout_value;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:259" *)
  reg branch_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:252" *)
  wire [31:0] branch_next;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:241" *)
  wire [12:0] branch_offset;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  wire bus_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  output [31:0] bus_addr;
  reg [31:0] bus_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  output bus_cyc;
  reg bus_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] bus_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  output bus_stb;
  reg bus_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  output [31:0] bus_w_data;
  reg [31:0] bus_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  output bus_w_en;
  reg bus_w_en;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  output debug_ack;
  reg debug_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  input [31:0] debug_addr;
  wire [31:0] debug_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  input debug_cyc;
  wire debug_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  output [31:0] debug_r_data;
  reg [31:0] debug_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  input debug_stb;
  wire debug_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  input [31:0] debug_w_data;
  wire [31:0] debug_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  input debug_w_en;
  wire debug_w_en;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:174" *)
  reg enable = 1'h1;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:175" *)
  reg fetch = 1'h1;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  reg [31:0] instruction_cache = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [31:0] \instruction_cache.b ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [2:0] \instruction_cache.b.f ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.b.offset_lower ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [6:0] \instruction_cache.b.offset_upper ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [6:0] \instruction_cache.b.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.b.rs1 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.b.rs2 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [31:0] \instruction_cache.i ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [2:0] \instruction_cache.i.f ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [11:0] \instruction_cache.i.imm ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [6:0] \instruction_cache.i.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.i.rd ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.i.rs ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [31:0] \instruction_cache.j ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [19:0] \instruction_cache.j.offset ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [6:0] \instruction_cache.j.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.j.rd ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [31:0] \instruction_cache.m ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [2:0] \instruction_cache.m.f ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [6:0] \instruction_cache.m.muldiv ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [6:0] \instruction_cache.m.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.m.rd ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.m.rs1 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.m.rs2 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [6:0] \instruction_cache.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [31:0] \instruction_cache.r ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [2:0] \instruction_cache.r.f_lower ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [6:0] \instruction_cache.r.f_upper ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [6:0] \instruction_cache.r.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.r.rd ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.r.rs1 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.r.rs2 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [31:0] \instruction_cache.s ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [2:0] \instruction_cache.s.f ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.s.imm_lower ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [6:0] \instruction_cache.s.imm_upper ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [6:0] \instruction_cache.s.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.s.rs1 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.s.rs2 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [31:0] \instruction_cache.u ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [19:0] \instruction_cache.u.imm ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [6:0] \instruction_cache.u.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  wire [4:0] \instruction_cache.u.rd ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  input [31:0] instruction_fetch;
  wire [31:0] instruction_fetch;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [31:0] \instruction_fetch.b ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [2:0] \instruction_fetch.b.f ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.b.offset_lower ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [6:0] \instruction_fetch.b.offset_upper ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [6:0] \instruction_fetch.b.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.b.rs1 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.b.rs2 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [31:0] \instruction_fetch.i ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [2:0] \instruction_fetch.i.f ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [11:0] \instruction_fetch.i.imm ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [6:0] \instruction_fetch.i.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.i.rd ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.i.rs ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [31:0] \instruction_fetch.j ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [19:0] \instruction_fetch.j.offset ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [6:0] \instruction_fetch.j.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.j.rd ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [31:0] \instruction_fetch.m ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [2:0] \instruction_fetch.m.f ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [6:0] \instruction_fetch.m.muldiv ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [6:0] \instruction_fetch.m.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.m.rd ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.m.rs1 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.m.rs2 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [6:0] \instruction_fetch.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [31:0] \instruction_fetch.r ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [2:0] \instruction_fetch.r.f_lower ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [6:0] \instruction_fetch.r.f_upper ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [6:0] \instruction_fetch.r.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.r.rd ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.r.rs1 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.r.rs2 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [31:0] \instruction_fetch.s ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [2:0] \instruction_fetch.s.f ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.s.imm_lower ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [6:0] \instruction_fetch.s.imm_upper ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [6:0] \instruction_fetch.s.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.s.rs1 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.s.rs2 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [31:0] \instruction_fetch.u ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [19:0] \instruction_fetch.u.imm ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [6:0] \instruction_fetch.u.op ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:187" *)
  wire [4:0] \instruction_fetch.u.rd ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:232" *)
  wire [20:0] jal_offset;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:230" *)
  reg [31:0] mem_address = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:229" *)
  reg [31:0] mem_register = 32'd0;
  (* enum_base_type = "MemoryStage" *)
  (* enum_value_0 = "SETUP" *)
  (* enum_value_1 = "RUN" *)
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:277" *)
  reg memorystage = 1'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\mul.py:12" *)
  reg mpu_en = 1'h0;
  (* enum_base_type = "Instruction" *)
  (* enum_value_0000011 = "MEMORYLOAD" *)
  (* enum_value_0001111 = "FENCE" *)
  (* enum_value_0010011 = "ARITHIMM" *)
  (* enum_value_0010111 = "AUIPC" *)
  (* enum_value_0100011 = "MEMORYSTORE" *)
  (* enum_value_0110011 = "ARITH" *)
  (* enum_value_0110111 = "LUI" *)
  (* enum_value_1100011 = "BRANCH" *)
  (* enum_value_1100111 = "JALR" *)
  (* enum_value_1101111 = "JAL" *)
  (* enum_value_1110011 = "E" *)
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:262" *)
  wire [6:0] opcode;
  (* enum_base_type = "Instruction" *)
  (* enum_value_0000011 = "MEMORYLOAD" *)
  (* enum_value_0001111 = "FENCE" *)
  (* enum_value_0010011 = "ARITHIMM" *)
  (* enum_value_0010111 = "AUIPC" *)
  (* enum_value_0100011 = "MEMORYSTORE" *)
  (* enum_value_0110011 = "ARITH" *)
  (* enum_value_0110111 = "LUI" *)
  (* enum_value_1100011 = "BRANCH" *)
  (* enum_value_1100111 = "JALR" *)
  (* enum_value_1101111 = "JAL" *)
  (* enum_value_1110011 = "E" *)
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:265" *)
  wire [6:0] opcode_cache;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  input prog_ack;
  wire prog_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:182" *)
  output [31:0] prog_addr;
  reg [31:0] prog_addr = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  output prog_cyc;
  wire prog_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:13" *)
  wire [31:0] prog_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  output prog_stb;
  wire prog_stb;
  (* init = 32'd0 *)
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:182" *)
  wire [31:0] program_counter;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r00 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r01 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r02 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r03 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r04 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r05 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r06 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r07 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r08 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r09 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r0A = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r0B = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r0C = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r0D = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r0E = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r0F = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r10 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r11 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r12 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r13 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r14 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r15 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r16 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r17 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r18 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r19 = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r1A = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r1B = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r1C = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r1D = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r1E = 32'd0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  reg [31:0] r1F = 32'd0;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* enum_base_type = "RunMode" *)
  (* enum_value_00 = "STOP" *)
  (* enum_value_01 = "STEP" *)
  (* enum_value_10 = "RUN" *)
  (* enum_value_11 = "ERROR" *)
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:176" *)
  reg [1:0] run_mode = 2'h0;
  assign \$15  = \$13  == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ast.py:2423" *) \$14 ;
  assign \$19  = debug_cyc & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:190" *) debug_stb;
  assign \$20  = debug_addr > (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:195" *) 1'h0;
  assign \$21  = debug_addr < (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:195" *) 6'h21;
  assign \$22  = \$20  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:195" *) \$21 ;
  assign \$23  = debug_addr - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:196" *) 1'h1;
  assign \$24  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:197" *) debug_addr;
  assign \$26  = $signed(\$25 ) + (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ast.py:2423" *) $signed(instruction_cache[31:20]);
  assign \$29  = instruction_cache[11:7] + (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:341" *) \$28 ;
  assign \$30  = $signed(\$27 ) + (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ast.py:2423" *) $signed(\$29 );
  assign \$33  = prog_addr - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:419" *) 3'h4;
  assign \$35  = $signed(\$33 ) + (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:419" *) $signed(\$34 );
  assign \$36  = $signed({ 1'h0, prog_addr }) + (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:430" *) $signed(jal_offset);
  assign \$38  = $signed(\$37 ) + (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ast.py:2423" *) $signed(instruction_cache[31:20]);
  assign \$40  = prog_cyc & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:452" *) prog_stb;
  assign \$41  = \$40  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:452" *) prog_ack;
  assign \$42  = run_mode == (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:454" *) 1'h1;
  assign \$43  = prog_addr + (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:459" *) 3'h4;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r00 <= \$44 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r01 <= \$45 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r02 <= \$46 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r03 <= \$47 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r04 <= \$48 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r05 <= \$49 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r06 <= \$50 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r07 <= \$51 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r08 <= \$52 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r09 <= \$53 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r0A <= \$54 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r0B <= \$55 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r0C <= \$56 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r0D <= \$57 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r0E <= \$58 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r0F <= \$59 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r10 <= \$60 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r11 <= \$61 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r12 <= \$62 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r13 <= \$63 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r14 <= \$64 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r15 <= \$65 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r16 <= \$66 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r17 <= \$67 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r18 <= \$68 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r19 <= \$69 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r1A <= \$70 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r1B <= \$71 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r1C <= \$72 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r1D <= \$73 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r1E <= \$74 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:178" *)
  always @(posedge clk)
    r1F <= \$75 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:174" *)
  always @(posedge clk)
    enable <= \$76 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:176" *)
  always @(posedge clk)
    run_mode <= \$77 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:182" *)
  always @(posedge clk)
    prog_addr <= \$78 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:175" *)
  always @(posedge clk)
    fetch <= \$79 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:269" *)
  always @(posedge clk)
    active <= \$80 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:230" *)
  always @(posedge clk)
    mem_address <= \$81 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:277" *)
  always @(posedge clk)
    memorystage <= \$82 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:229" *)
  always @(posedge clk)
    mem_register <= \$83 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:186" *)
  always @(posedge clk)
    instruction_cache <= \$84 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\mul.py:12" *)
  always @(posedge clk)
    mpu_en <= \$85 ;
  assign \$1  = debug_cyc & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:190" *) debug_stb;
  assign \$2  = debug_addr - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:225" *) 1'h1;
  assign \$6  = \$4  + (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:246" *) \$5 ;
  assign \$8  = \$6  + (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:246" *) \$7 ;
  assign \$10  = \$8  + (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:246" *) \$9 ;
  assign \$11  = $signed({ 1'h0, prog_addr }) + (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:255" *) $signed(\$10 [12:0]);
  assign \$12  = $signed(\$11 ) - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:255" *) $signed(4'h4);
  assign prog_cyc = enable & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:272" *) fetch;
  assign prog_stb = enable & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\core\\cpu.py:273" *) fetch;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (instruction_cache[24:20])
      5'h00:
          \$13  = r00;
      5'h01:
          \$13  = r01;
      5'h02:
          \$13  = r02;
      5'h03:
          \$13  = r03;
      5'h04:
          \$13  = r04;
      5'h05:
          \$13  = r05;
      5'h06:
          \$13  = r06;
      5'h07:
          \$13  = r07;
      5'h08:
          \$13  = r08;
      5'h09:
          \$13  = r09;
      5'h0a:
          \$13  = r0A;
      5'h0b:
          \$13  = r0B;
      5'h0c:
          \$13  = r0C;
      5'h0d:
          \$13  = r0D;
      5'h0e:
          \$13  = r0E;
      5'h0f:
          \$13  = r0F;
      5'h10:
          \$13  = r10;
      5'h11:
          \$13  = r11;
      5'h12:
          \$13  = r12;
      5'h13:
          \$13  = r13;
      5'h14:
          \$13  = r14;
      5'h15:
          \$13  = r15;
      5'h16:
          \$13  = r16;
      5'h17:
          \$13  = r17;
      5'h18:
          \$13  = r18;
      5'h19:
          \$13  = r19;
      5'h1a:
          \$13  = r1A;
      5'h1b:
          \$13  = r1B;
      5'h1c:
          \$13  = r1C;
      5'h1d:
          \$13  = r1D;
      5'h1e:
          \$13  = r1E;
      5'h1f:
          \$13  = r1F;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (instruction_cache[19:15])
      5'h00:
          \$14  = r00;
      5'h01:
          \$14  = r01;
      5'h02:
          \$14  = r02;
      5'h03:
          \$14  = r03;
      5'h04:
          \$14  = r04;
      5'h05:
          \$14  = r05;
      5'h06:
          \$14  = r06;
      5'h07:
          \$14  = r07;
      5'h08:
          \$14  = r08;
      5'h09:
          \$14  = r09;
      5'h0a:
          \$14  = r0A;
      5'h0b:
          \$14  = r0B;
      5'h0c:
          \$14  = r0C;
      5'h0d:
          \$14  = r0D;
      5'h0e:
          \$14  = r0E;
      5'h0f:
          \$14  = r0F;
      5'h10:
          \$14  = r10;
      5'h11:
          \$14  = r11;
      5'h12:
          \$14  = r12;
      5'h13:
          \$14  = r13;
      5'h14:
          \$14  = r14;
      5'h15:
          \$14  = r15;
      5'h16:
          \$14  = r16;
      5'h17:
          \$14  = r17;
      5'h18:
          \$14  = r18;
      5'h19:
          \$14  = r19;
      5'h1a:
          \$14  = r1A;
      5'h1b:
          \$14  = r1B;
      5'h1c:
          \$14  = r1C;
      5'h1d:
          \$14  = r1D;
      5'h1e:
          \$14  = r1E;
      5'h1f:
          \$14  = r1F;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (instruction_cache[19:15])
      5'h00:
          \$16  = r00;
      5'h01:
          \$16  = r01;
      5'h02:
          \$16  = r02;
      5'h03:
          \$16  = r03;
      5'h04:
          \$16  = r04;
      5'h05:
          \$16  = r05;
      5'h06:
          \$16  = r06;
      5'h07:
          \$16  = r07;
      5'h08:
          \$16  = r08;
      5'h09:
          \$16  = r09;
      5'h0a:
          \$16  = r0A;
      5'h0b:
          \$16  = r0B;
      5'h0c:
          \$16  = r0C;
      5'h0d:
          \$16  = r0D;
      5'h0e:
          \$16  = r0E;
      5'h0f:
          \$16  = r0F;
      5'h10:
          \$16  = r10;
      5'h11:
          \$16  = r11;
      5'h12:
          \$16  = r12;
      5'h13:
          \$16  = r13;
      5'h14:
          \$16  = r14;
      5'h15:
          \$16  = r15;
      5'h16:
          \$16  = r16;
      5'h17:
          \$16  = r17;
      5'h18:
          \$16  = r18;
      5'h19:
          \$16  = r19;
      5'h1a:
          \$16  = r1A;
      5'h1b:
          \$16  = r1B;
      5'h1c:
          \$16  = r1C;
      5'h1d:
          \$16  = r1D;
      5'h1e:
          \$16  = r1E;
      5'h1f:
          \$16  = r1F;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (instruction_cache[24:20])
      5'h00:
          \$17  = r00;
      5'h01:
          \$17  = r01;
      5'h02:
          \$17  = r02;
      5'h03:
          \$17  = r03;
      5'h04:
          \$17  = r04;
      5'h05:
          \$17  = r05;
      5'h06:
          \$17  = r06;
      5'h07:
          \$17  = r07;
      5'h08:
          \$17  = r08;
      5'h09:
          \$17  = r09;
      5'h0a:
          \$17  = r0A;
      5'h0b:
          \$17  = r0B;
      5'h0c:
          \$17  = r0C;
      5'h0d:
          \$17  = r0D;
      5'h0e:
          \$17  = r0E;
      5'h0f:
          \$17  = r0F;
      5'h10:
          \$17  = r10;
      5'h11:
          \$17  = r11;
      5'h12:
          \$17  = r12;
      5'h13:
          \$17  = r13;
      5'h14:
          \$17  = r14;
      5'h15:
          \$17  = r15;
      5'h16:
          \$17  = r16;
      5'h17:
          \$17  = r17;
      5'h18:
          \$17  = r18;
      5'h19:
          \$17  = r19;
      5'h1a:
          \$17  = r1A;
      5'h1b:
          \$17  = r1B;
      5'h1c:
          \$17  = r1C;
      5'h1d:
          \$17  = r1D;
      5'h1e:
          \$17  = r1E;
      5'h1f:
          \$17  = r1F;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (instruction_cache[19:15])
      5'h00:
          \$18  = r00;
      5'h01:
          \$18  = r01;
      5'h02:
          \$18  = r02;
      5'h03:
          \$18  = r03;
      5'h04:
          \$18  = r04;
      5'h05:
          \$18  = r05;
      5'h06:
          \$18  = r06;
      5'h07:
          \$18  = r07;
      5'h08:
          \$18  = r08;
      5'h09:
          \$18  = r09;
      5'h0a:
          \$18  = r0A;
      5'h0b:
          \$18  = r0B;
      5'h0c:
          \$18  = r0C;
      5'h0d:
          \$18  = r0D;
      5'h0e:
          \$18  = r0E;
      5'h0f:
          \$18  = r0F;
      5'h10:
          \$18  = r10;
      5'h11:
          \$18  = r11;
      5'h12:
          \$18  = r12;
      5'h13:
          \$18  = r13;
      5'h14:
          \$18  = r14;
      5'h15:
          \$18  = r15;
      5'h16:
          \$18  = r16;
      5'h17:
          \$18  = r17;
      5'h18:
          \$18  = r18;
      5'h19:
          \$18  = r19;
      5'h1a:
          \$18  = r1A;
      5'h1b:
          \$18  = r1B;
      5'h1c:
          \$18  = r1C;
      5'h1d:
          \$18  = r1D;
      5'h1e:
          \$18  = r1E;
      5'h1f:
          \$18  = r1F;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (instruction_cache[19:15])
      5'h00:
          \$25  = r00;
      5'h01:
          \$25  = r01;
      5'h02:
          \$25  = r02;
      5'h03:
          \$25  = r03;
      5'h04:
          \$25  = r04;
      5'h05:
          \$25  = r05;
      5'h06:
          \$25  = r06;
      5'h07:
          \$25  = r07;
      5'h08:
          \$25  = r08;
      5'h09:
          \$25  = r09;
      5'h0a:
          \$25  = r0A;
      5'h0b:
          \$25  = r0B;
      5'h0c:
          \$25  = r0C;
      5'h0d:
          \$25  = r0D;
      5'h0e:
          \$25  = r0E;
      5'h0f:
          \$25  = r0F;
      5'h10:
          \$25  = r10;
      5'h11:
          \$25  = r11;
      5'h12:
          \$25  = r12;
      5'h13:
          \$25  = r13;
      5'h14:
          \$25  = r14;
      5'h15:
          \$25  = r15;
      5'h16:
          \$25  = r16;
      5'h17:
          \$25  = r17;
      5'h18:
          \$25  = r18;
      5'h19:
          \$25  = r19;
      5'h1a:
          \$25  = r1A;
      5'h1b:
          \$25  = r1B;
      5'h1c:
          \$25  = r1C;
      5'h1d:
          \$25  = r1D;
      5'h1e:
          \$25  = r1E;
      5'h1f:
          \$25  = r1F;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (instruction_cache[19:15])
      5'h00:
          \$27  = r00;
      5'h01:
          \$27  = r01;
      5'h02:
          \$27  = r02;
      5'h03:
          \$27  = r03;
      5'h04:
          \$27  = r04;
      5'h05:
          \$27  = r05;
      5'h06:
          \$27  = r06;
      5'h07:
          \$27  = r07;
      5'h08:
          \$27  = r08;
      5'h09:
          \$27  = r09;
      5'h0a:
          \$27  = r0A;
      5'h0b:
          \$27  = r0B;
      5'h0c:
          \$27  = r0C;
      5'h0d:
          \$27  = r0D;
      5'h0e:
          \$27  = r0E;
      5'h0f:
          \$27  = r0F;
      5'h10:
          \$27  = r10;
      5'h11:
          \$27  = r11;
      5'h12:
          \$27  = r12;
      5'h13:
          \$27  = r13;
      5'h14:
          \$27  = r14;
      5'h15:
          \$27  = r15;
      5'h16:
          \$27  = r16;
      5'h17:
          \$27  = r17;
      5'h18:
          \$27  = r18;
      5'h19:
          \$27  = r19;
      5'h1a:
          \$27  = r1A;
      5'h1b:
          \$27  = r1B;
      5'h1c:
          \$27  = r1C;
      5'h1d:
          \$27  = r1D;
      5'h1e:
          \$27  = r1E;
      5'h1f:
          \$27  = r1F;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (instruction_cache[24:20])
      5'h00:
          \$31  = r00;
      5'h01:
          \$31  = r01;
      5'h02:
          \$31  = r02;
      5'h03:
          \$31  = r03;
      5'h04:
          \$31  = r04;
      5'h05:
          \$31  = r05;
      5'h06:
          \$31  = r06;
      5'h07:
          \$31  = r07;
      5'h08:
          \$31  = r08;
      5'h09:
          \$31  = r09;
      5'h0a:
          \$31  = r0A;
      5'h0b:
          \$31  = r0B;
      5'h0c:
          \$31  = r0C;
      5'h0d:
          \$31  = r0D;
      5'h0e:
          \$31  = r0E;
      5'h0f:
          \$31  = r0F;
      5'h10:
          \$31  = r10;
      5'h11:
          \$31  = r11;
      5'h12:
          \$31  = r12;
      5'h13:
          \$31  = r13;
      5'h14:
          \$31  = r14;
      5'h15:
          \$31  = r15;
      5'h16:
          \$31  = r16;
      5'h17:
          \$31  = r17;
      5'h18:
          \$31  = r18;
      5'h19:
          \$31  = r19;
      5'h1a:
          \$31  = r1A;
      5'h1b:
          \$31  = r1B;
      5'h1c:
          \$31  = r1C;
      5'h1d:
          \$31  = r1D;
      5'h1e:
          \$31  = r1E;
      5'h1f:
          \$31  = r1F;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (instruction_cache[19:15])
      5'h00:
          \$37  = r00;
      5'h01:
          \$37  = r01;
      5'h02:
          \$37  = r02;
      5'h03:
          \$37  = r03;
      5'h04:
          \$37  = r04;
      5'h05:
          \$37  = r05;
      5'h06:
          \$37  = r06;
      5'h07:
          \$37  = r07;
      5'h08:
          \$37  = r08;
      5'h09:
          \$37  = r09;
      5'h0a:
          \$37  = r0A;
      5'h0b:
          \$37  = r0B;
      5'h0c:
          \$37  = r0C;
      5'h0d:
          \$37  = r0D;
      5'h0e:
          \$37  = r0E;
      5'h0f:
          \$37  = r0F;
      5'h10:
          \$37  = r10;
      5'h11:
          \$37  = r11;
      5'h12:
          \$37  = r12;
      5'h13:
          \$37  = r13;
      5'h14:
          \$37  = r14;
      5'h15:
          \$37  = r15;
      5'h16:
          \$37  = r16;
      5'h17:
          \$37  = r17;
      5'h18:
          \$37  = r18;
      5'h19:
          \$37  = r19;
      5'h1a:
          \$37  = r1A;
      5'h1b:
          \$37  = r1B;
      5'h1c:
          \$37  = r1C;
      5'h1d:
          \$37  = r1D;
      5'h1e:
          \$37  = r1E;
      5'h1f:
          \$37  = r1F;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    debug_ack = 1'h0;
    if (\$1 ) begin
      (* full_case = 32'd1 *)
      if (debug_w_en) begin
        debug_ack = 1'h1;
      end else begin
        debug_ack = 1'h1;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    debug_r_data = 32'd0;
    if (\$1 ) begin
      (* full_case = 32'd1 *)
      if (debug_w_en) begin
      end else begin
        (* full_case = 32'd1 *)
        casez (debug_addr)
          32'd0:
              debug_r_data = { 30'h00000000, run_mode };
          32'd33:
              debug_r_data = prog_addr;
          32'd34:
              debug_r_data = instruction_fetch;
          32'd35:
              debug_r_data = instruction_cache;
          32'd36:
              debug_r_data = { 31'h00000000, fetch };
          32'd37:
              debug_r_data = { 31'h00000000, enable };
          default:
              debug_r_data = \$3 ;
        endcase
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    branch_en = 1'h0;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            branch_en = \$15 ;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    bus_cyc = 1'h0;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            (* full_case = 32'd1 *)
            casez (memorystage)
              1'h0:
                  /* empty */;
              1'h1:
                  bus_cyc = 1'h1;
            endcase
        7'h23:
            (* full_case = 32'd1 *)
            casez (memorystage)
              1'h0:
                  /* empty */;
              1'h1:
                  bus_cyc = 1'h1;
            endcase
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    bus_stb = 1'h0;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            (* full_case = 32'd1 *)
            casez (memorystage)
              1'h0:
                  /* empty */;
              1'h1:
                  bus_stb = 1'h1;
            endcase
        7'h23:
            (* full_case = 32'd1 *)
            casez (memorystage)
              1'h0:
                  /* empty */;
              1'h1:
                  bus_stb = 1'h1;
            endcase
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    bus_addr = 32'd0;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            (* full_case = 32'd1 *)
            casez (memorystage)
              1'h0:
                  /* empty */;
              1'h1:
                  bus_addr = mem_address;
            endcase
        7'h23:
            (* full_case = 32'd1 *)
            casez (memorystage)
              1'h0:
                  /* empty */;
              1'h1:
                  bus_addr = mem_address;
            endcase
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    bus_w_en = 1'h0;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            /* empty */;
        7'h23:
            (* full_case = 32'd1 *)
            casez (memorystage)
              1'h0:
                  /* empty */;
              1'h1:
                  bus_w_en = 1'h1;
            endcase
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    bus_w_data = 32'd0;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            /* empty */;
        7'h23:
            (* full_case = 32'd1 *)
            casez (memorystage)
              1'h0:
                  /* empty */;
              1'h1:
                  bus_w_data = mem_register;
            endcase
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    aluin_s1 = 32'd0;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            /* empty */;
        7'h23:
            /* empty */;
        7'h33:
            aluin_s1 = \$16 ;
        7'h13:
            aluin_s1 = \$18 ;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    aluin_s2 = 32'd0;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            /* empty */;
        7'h23:
            /* empty */;
        7'h33:
            aluin_s2 = \$17 ;
        7'h13:
            aluin_s2 = { instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31:20] };
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    aluin_valid = 1'h0;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            /* empty */;
        7'h23:
            /* empty */;
        7'h33:
            aluin_valid = 1'h1;
        7'h13:
            aluin_valid = 1'h1;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    aluin_d = 5'h00;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            /* empty */;
        7'h23:
            /* empty */;
        7'h33:
            aluin_d = instruction_cache[11:7];
        7'h13:
            aluin_d = instruction_cache[11:7];
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$44  = r00;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                \$44  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            \$44  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        \$44  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  \$44  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  \$44  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  \$44  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  \$44  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$44  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$45  = r01;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                \$45  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            \$45  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        \$45  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  \$45  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  \$45  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  \$45  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  \$45  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$45  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$46  = r02;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                \$46  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            \$46  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        \$46  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  \$46  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  \$46  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  \$46  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  \$46  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$46  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$47  = r03;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                \$47  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            \$47  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        \$47  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  \$47  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  \$47  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  \$47  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  \$47  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$47  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$48  = r04;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                \$48  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            \$48  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        \$48  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  \$48  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  \$48  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  \$48  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  \$48  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$48  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$49  = r05;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                \$49  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            \$49  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        \$49  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  \$49  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  \$49  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  \$49  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  \$49  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$49  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$50  = r06;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                \$50  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            \$50  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        \$50  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  \$50  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  \$50  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  \$50  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  \$50  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$50  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$51  = r07;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                \$51  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            \$51  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        \$51  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  \$51  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  \$51  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  \$51  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  \$51  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$51  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$52  = r08;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                \$52  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            \$52  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        \$52  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  \$52  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  \$52  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  \$52  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  \$52  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$52  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$53  = r09;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                \$53  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            \$53  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        \$53  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  \$53  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  \$53  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  \$53  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  \$53  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$53  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$54  = r0A;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                \$54  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            \$54  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        \$54  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  \$54  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  \$54  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  \$54  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  \$54  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$54  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$55  = r0B;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                \$55  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            \$55  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        \$55  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  \$55  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  \$55  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  \$55  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  \$55  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$55  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$56  = r0C;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                \$56  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            \$56  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        \$56  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  \$56  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  \$56  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  \$56  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  \$56  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$56  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$57  = r0D;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                \$57  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            \$57  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        \$57  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  \$57  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  \$57  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  \$57  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  \$57  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$57  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$58  = r0E;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                \$58  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            \$58  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        \$58  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  \$58  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  \$58  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  \$58  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  \$58  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$58  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$59  = r0F;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                \$59  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            \$59  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        \$59  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  \$59  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  \$59  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  \$59  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  \$59  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$59  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$60  = r10;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                \$60  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            \$60  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        \$60  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  \$60  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  \$60  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  \$60  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  \$60  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$60  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$61  = r11;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                \$61  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            \$61  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        \$61  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  \$61  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  \$61  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  \$61  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  \$61  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$61  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$62  = r12;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                \$62  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            \$62  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        \$62  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  \$62  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  \$62  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  \$62  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  \$62  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$62  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$63  = r13;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                /* empty */;
            33'h000000013:
                \$63  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            \$63  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        /* empty */;
                    5'h13:
                        \$63  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  \$63  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  \$63  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  \$63  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  \$63  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$63  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$64  = r14;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                /* empty */;
            33'h000000013:
                /* empty */;
            33'h000000014:
                \$64  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            \$64  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        /* empty */;
                    5'h13:
                        /* empty */;
                    5'h14:
                        \$64  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  \$64  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  \$64  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  \$64  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  \$64  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$64  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$65  = r15;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                /* empty */;
            33'h000000013:
                /* empty */;
            33'h000000014:
                /* empty */;
            33'h000000015:
                \$65  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            \$65  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        /* empty */;
                    5'h13:
                        /* empty */;
                    5'h14:
                        /* empty */;
                    5'h15:
                        \$65  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  \$65  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  \$65  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  \$65  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  \$65  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$65  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$66  = r16;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                /* empty */;
            33'h000000013:
                /* empty */;
            33'h000000014:
                /* empty */;
            33'h000000015:
                /* empty */;
            33'h000000016:
                \$66  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            \$66  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        /* empty */;
                    5'h13:
                        /* empty */;
                    5'h14:
                        /* empty */;
                    5'h15:
                        /* empty */;
                    5'h16:
                        \$66  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  \$66  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  \$66  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  \$66  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  \$66  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$66  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$67  = r17;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                /* empty */;
            33'h000000013:
                /* empty */;
            33'h000000014:
                /* empty */;
            33'h000000015:
                /* empty */;
            33'h000000016:
                /* empty */;
            33'h000000017:
                \$67  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            \$67  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        /* empty */;
                    5'h13:
                        /* empty */;
                    5'h14:
                        /* empty */;
                    5'h15:
                        /* empty */;
                    5'h16:
                        /* empty */;
                    5'h17:
                        \$67  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  \$67  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  \$67  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  \$67  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  \$67  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$67  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$68  = r18;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                /* empty */;
            33'h000000013:
                /* empty */;
            33'h000000014:
                /* empty */;
            33'h000000015:
                /* empty */;
            33'h000000016:
                /* empty */;
            33'h000000017:
                /* empty */;
            33'h000000018:
                \$68  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            \$68  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        /* empty */;
                    5'h13:
                        /* empty */;
                    5'h14:
                        /* empty */;
                    5'h15:
                        /* empty */;
                    5'h16:
                        /* empty */;
                    5'h17:
                        /* empty */;
                    5'h18:
                        \$68  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  \$68  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  \$68  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  \$68  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  \$68  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$68  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$69  = r19;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                /* empty */;
            33'h000000013:
                /* empty */;
            33'h000000014:
                /* empty */;
            33'h000000015:
                /* empty */;
            33'h000000016:
                /* empty */;
            33'h000000017:
                /* empty */;
            33'h000000018:
                /* empty */;
            33'h000000019:
                \$69  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            \$69  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        /* empty */;
                    5'h13:
                        /* empty */;
                    5'h14:
                        /* empty */;
                    5'h15:
                        /* empty */;
                    5'h16:
                        /* empty */;
                    5'h17:
                        /* empty */;
                    5'h18:
                        /* empty */;
                    5'h19:
                        \$69  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  \$69  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  \$69  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  \$69  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  \$69  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$69  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$70  = r1A;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                /* empty */;
            33'h000000013:
                /* empty */;
            33'h000000014:
                /* empty */;
            33'h000000015:
                /* empty */;
            33'h000000016:
                /* empty */;
            33'h000000017:
                /* empty */;
            33'h000000018:
                /* empty */;
            33'h000000019:
                /* empty */;
            33'h00000001a:
                \$70  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            /* empty */;
        5'h1a:
            \$70  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        /* empty */;
                    5'h13:
                        /* empty */;
                    5'h14:
                        /* empty */;
                    5'h15:
                        /* empty */;
                    5'h16:
                        /* empty */;
                    5'h17:
                        /* empty */;
                    5'h18:
                        /* empty */;
                    5'h19:
                        /* empty */;
                    5'h1a:
                        \$70  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  \$70  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  \$70  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  \$70  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  \$70  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$70  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$71  = r1B;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                /* empty */;
            33'h000000013:
                /* empty */;
            33'h000000014:
                /* empty */;
            33'h000000015:
                /* empty */;
            33'h000000016:
                /* empty */;
            33'h000000017:
                /* empty */;
            33'h000000018:
                /* empty */;
            33'h000000019:
                /* empty */;
            33'h00000001a:
                /* empty */;
            33'h00000001b:
                \$71  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            /* empty */;
        5'h1a:
            /* empty */;
        5'h1b:
            \$71  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        /* empty */;
                    5'h13:
                        /* empty */;
                    5'h14:
                        /* empty */;
                    5'h15:
                        /* empty */;
                    5'h16:
                        /* empty */;
                    5'h17:
                        /* empty */;
                    5'h18:
                        /* empty */;
                    5'h19:
                        /* empty */;
                    5'h1a:
                        /* empty */;
                    5'h1b:
                        \$71  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  \$71  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  \$71  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  \$71  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  \$71  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$71  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$72  = r1C;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                /* empty */;
            33'h000000013:
                /* empty */;
            33'h000000014:
                /* empty */;
            33'h000000015:
                /* empty */;
            33'h000000016:
                /* empty */;
            33'h000000017:
                /* empty */;
            33'h000000018:
                /* empty */;
            33'h000000019:
                /* empty */;
            33'h00000001a:
                /* empty */;
            33'h00000001b:
                /* empty */;
            33'h00000001c:
                \$72  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            /* empty */;
        5'h1a:
            /* empty */;
        5'h1b:
            /* empty */;
        5'h1c:
            \$72  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        /* empty */;
                    5'h13:
                        /* empty */;
                    5'h14:
                        /* empty */;
                    5'h15:
                        /* empty */;
                    5'h16:
                        /* empty */;
                    5'h17:
                        /* empty */;
                    5'h18:
                        /* empty */;
                    5'h19:
                        /* empty */;
                    5'h1a:
                        /* empty */;
                    5'h1b:
                        /* empty */;
                    5'h1c:
                        \$72  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  \$72  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  \$72  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  \$72  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  \$72  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$72  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$73  = r1D;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                /* empty */;
            33'h000000013:
                /* empty */;
            33'h000000014:
                /* empty */;
            33'h000000015:
                /* empty */;
            33'h000000016:
                /* empty */;
            33'h000000017:
                /* empty */;
            33'h000000018:
                /* empty */;
            33'h000000019:
                /* empty */;
            33'h00000001a:
                /* empty */;
            33'h00000001b:
                /* empty */;
            33'h00000001c:
                /* empty */;
            33'h00000001d:
                \$73  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            /* empty */;
        5'h1a:
            /* empty */;
        5'h1b:
            /* empty */;
        5'h1c:
            /* empty */;
        5'h1d:
            \$73  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        /* empty */;
                    5'h13:
                        /* empty */;
                    5'h14:
                        /* empty */;
                    5'h15:
                        /* empty */;
                    5'h16:
                        /* empty */;
                    5'h17:
                        /* empty */;
                    5'h18:
                        /* empty */;
                    5'h19:
                        /* empty */;
                    5'h1a:
                        /* empty */;
                    5'h1b:
                        /* empty */;
                    5'h1c:
                        /* empty */;
                    5'h1d:
                        \$73  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  /* empty */;
              5'h1d:
                  \$73  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  /* empty */;
              5'h1d:
                  \$73  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  /* empty */;
              5'h1d:
                  \$73  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  /* empty */;
              5'h1d:
                  \$73  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$73  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$74  = r1E;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                /* empty */;
            33'h000000013:
                /* empty */;
            33'h000000014:
                /* empty */;
            33'h000000015:
                /* empty */;
            33'h000000016:
                /* empty */;
            33'h000000017:
                /* empty */;
            33'h000000018:
                /* empty */;
            33'h000000019:
                /* empty */;
            33'h00000001a:
                /* empty */;
            33'h00000001b:
                /* empty */;
            33'h00000001c:
                /* empty */;
            33'h00000001d:
                /* empty */;
            33'h00000001e:
                \$74  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            /* empty */;
        5'h1a:
            /* empty */;
        5'h1b:
            /* empty */;
        5'h1c:
            /* empty */;
        5'h1d:
            /* empty */;
        5'h1e:
            \$74  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        /* empty */;
                    5'h13:
                        /* empty */;
                    5'h14:
                        /* empty */;
                    5'h15:
                        /* empty */;
                    5'h16:
                        /* empty */;
                    5'h17:
                        /* empty */;
                    5'h18:
                        /* empty */;
                    5'h19:
                        /* empty */;
                    5'h1a:
                        /* empty */;
                    5'h1b:
                        /* empty */;
                    5'h1c:
                        /* empty */;
                    5'h1d:
                        /* empty */;
                    5'h1e:
                        \$74  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  /* empty */;
              5'h1d:
                  /* empty */;
              5'h1e:
                  \$74  = \$32 [31:0];
            endcase
        7'h17:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  /* empty */;
              5'h1d:
                  /* empty */;
              5'h1e:
                  \$74  = \$35 [31:0];
            endcase
        7'h6f:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  /* empty */;
              5'h1d:
                  /* empty */;
              5'h1e:
                  \$74  = prog_addr;
            endcase
        7'h67:
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  /* empty */;
              5'h1d:
                  /* empty */;
              5'h1e:
                  \$74  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$74  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$75  = r1F;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$22 ) begin
          casez (\$23 )
            33'h000000000:
                /* empty */;
            33'h000000001:
                /* empty */;
            33'h000000002:
                /* empty */;
            33'h000000003:
                /* empty */;
            33'h000000004:
                /* empty */;
            33'h000000005:
                /* empty */;
            33'h000000006:
                /* empty */;
            33'h000000007:
                /* empty */;
            33'h000000008:
                /* empty */;
            33'h000000009:
                /* empty */;
            33'h00000000a:
                /* empty */;
            33'h00000000b:
                /* empty */;
            33'h00000000c:
                /* empty */;
            33'h00000000d:
                /* empty */;
            33'h00000000e:
                /* empty */;
            33'h00000000f:
                /* empty */;
            33'h000000010:
                /* empty */;
            33'h000000011:
                /* empty */;
            33'h000000012:
                /* empty */;
            33'h000000013:
                /* empty */;
            33'h000000014:
                /* empty */;
            33'h000000015:
                /* empty */;
            33'h000000016:
                /* empty */;
            33'h000000017:
                /* empty */;
            33'h000000018:
                /* empty */;
            33'h000000019:
                /* empty */;
            33'h00000001a:
                /* empty */;
            33'h00000001b:
                /* empty */;
            33'h00000001c:
                /* empty */;
            33'h00000001d:
                /* empty */;
            33'h00000001e:
                /* empty */;
            33'h00000001f:
                \$75  = debug_w_data;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      (* full_case = 32'd1 *)
      casez (aluout_d)
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            /* empty */;
        5'h1a:
            /* empty */;
        5'h1b:
            /* empty */;
        5'h1c:
            /* empty */;
        5'h1d:
            /* empty */;
        5'h1e:
            /* empty */;
        5'h1f:
            \$75  = aluout_value;
      endcase
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  (* full_case = 32'd1 *)
                  casez (instruction_cache[11:7])
                    5'h00:
                        /* empty */;
                    5'h01:
                        /* empty */;
                    5'h02:
                        /* empty */;
                    5'h03:
                        /* empty */;
                    5'h04:
                        /* empty */;
                    5'h05:
                        /* empty */;
                    5'h06:
                        /* empty */;
                    5'h07:
                        /* empty */;
                    5'h08:
                        /* empty */;
                    5'h09:
                        /* empty */;
                    5'h0a:
                        /* empty */;
                    5'h0b:
                        /* empty */;
                    5'h0c:
                        /* empty */;
                    5'h0d:
                        /* empty */;
                    5'h0e:
                        /* empty */;
                    5'h0f:
                        /* empty */;
                    5'h10:
                        /* empty */;
                    5'h11:
                        /* empty */;
                    5'h12:
                        /* empty */;
                    5'h13:
                        /* empty */;
                    5'h14:
                        /* empty */;
                    5'h15:
                        /* empty */;
                    5'h16:
                        /* empty */;
                    5'h17:
                        /* empty */;
                    5'h18:
                        /* empty */;
                    5'h19:
                        /* empty */;
                    5'h1a:
                        /* empty */;
                    5'h1b:
                        /* empty */;
                    5'h1c:
                        /* empty */;
                    5'h1d:
                        /* empty */;
                    5'h1e:
                        /* empty */;
                    5'h1f:
                        \$75  = 32'd0;
                  endcase
            endcase
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            (* full_case = 32'd1 *)
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  /* empty */;
              5'h1d:
                  /* empty */;
              5'h1e:
                  /* empty */;
              5'h1f:
                  \$75  = \$32 [31:0];
            endcase
        7'h17:
            (* full_case = 32'd1 *)
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  /* empty */;
              5'h1d:
                  /* empty */;
              5'h1e:
                  /* empty */;
              5'h1f:
                  \$75  = \$35 [31:0];
            endcase
        7'h6f:
            (* full_case = 32'd1 *)
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  /* empty */;
              5'h1d:
                  /* empty */;
              5'h1e:
                  /* empty */;
              5'h1f:
                  \$75  = prog_addr;
            endcase
        7'h67:
            (* full_case = 32'd1 *)
            casez (instruction_cache[11:7])
              5'h00:
                  /* empty */;
              5'h01:
                  /* empty */;
              5'h02:
                  /* empty */;
              5'h03:
                  /* empty */;
              5'h04:
                  /* empty */;
              5'h05:
                  /* empty */;
              5'h06:
                  /* empty */;
              5'h07:
                  /* empty */;
              5'h08:
                  /* empty */;
              5'h09:
                  /* empty */;
              5'h0a:
                  /* empty */;
              5'h0b:
                  /* empty */;
              5'h0c:
                  /* empty */;
              5'h0d:
                  /* empty */;
              5'h0e:
                  /* empty */;
              5'h0f:
                  /* empty */;
              5'h10:
                  /* empty */;
              5'h11:
                  /* empty */;
              5'h12:
                  /* empty */;
              5'h13:
                  /* empty */;
              5'h14:
                  /* empty */;
              5'h15:
                  /* empty */;
              5'h16:
                  /* empty */;
              5'h17:
                  /* empty */;
              5'h18:
                  /* empty */;
              5'h19:
                  /* empty */;
              5'h1a:
                  /* empty */;
              5'h1b:
                  /* empty */;
              5'h1c:
                  /* empty */;
              5'h1d:
                  /* empty */;
              5'h1e:
                  /* empty */;
              5'h1f:
                  \$75  = prog_addr;
            endcase
      endcase
    end
    if (rst) begin
      \$75  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$76  = enable;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$24 ) begin
          casez (debug_w_data)
            32'd0:
                \$76  = 1'h0;
            32'd1:
                \$76  = 1'h1;
            32'd2:
                \$76  = 1'h1;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      if (aluout_error) begin
        \$76  = 1'h0;
      end
    end
    if (active) begin
      (* full_case = 32'd1 *)
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            /* empty */;
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            /* empty */;
        7'h17:
            /* empty */;
        7'h6f:
            /* empty */;
        7'h67:
            /* empty */;
        default:
            \$76  = 1'h0;
      endcase
    end
    if (\$41 ) begin
      if (\$42 ) begin
        \$76  = 1'h0;
      end
    end
    if (rst) begin
      \$76  = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$77  = run_mode;
    if (\$19 ) begin
      if (debug_w_en) begin
        if (\$24 ) begin
          casez (debug_w_data)
            32'd0:
                \$77  = 2'h0;
            32'd1:
                \$77  = 2'h1;
            32'd2:
                \$77  = 2'h2;
          endcase
        end
      end
    end
    if (aluout_valid) begin
      if (aluout_error) begin
        \$77  = 2'h3;
      end
    end
    if (active) begin
      (* full_case = 32'd1 *)
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            /* empty */;
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            /* empty */;
        7'h17:
            /* empty */;
        7'h6f:
            /* empty */;
        7'h67:
            /* empty */;
        default:
            \$77  = 2'h3;
      endcase
    end
    if (rst) begin
      \$77  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$78  = prog_addr;
    if (branch_en) begin
      \$78  = \$12 [31:0];
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            /* empty */;
        7'h23:
            /* empty */;
        7'h33:
            /* empty */;
        7'h13:
            /* empty */;
        7'h37:
            /* empty */;
        7'h17:
            /* empty */;
        7'h6f:
            \$78  = \$36 [31:0];
        7'h67:
            \$78  = \$39 [31:0];
      endcase
    end
    if (\$41 ) begin
      \$78  = \$43 [31:0];
    end
    if (rst) begin
      \$78  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$79  = fetch;
    if (branch_en) begin
      \$79  = 1'h1;
    end
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            \$79  = 1'h1;
        7'h03:
            /* empty */;
        7'h23:
            /* empty */;
        7'h33:
            if (aluout_valid) begin
              \$79  = 1'h1;
            end
        7'h13:
            if (aluout_valid) begin
              \$79  = 1'h1;
            end
        7'h37:
            /* empty */;
        7'h17:
            /* empty */;
        7'h6f:
            \$79  = 1'h1;
        7'h67:
            \$79  = 1'h1;
      endcase
    end
    if (\$41 ) begin
      \$79  = 1'h0;
    end
    if (rst) begin
      \$79  = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$80  = active;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            \$80  = 1'h0;
        7'h03:
            /* empty */;
        7'h23:
            /* empty */;
        7'h33:
            if (aluout_valid) begin
              \$80  = 1'h0;
            end
        7'h13:
            if (aluout_valid) begin
              \$80  = 1'h0;
            end
        7'h37:
            \$80  = 1'h0;
        7'h17:
            \$80  = 1'h0;
        7'h6f:
            \$80  = 1'h0;
        7'h67:
            \$80  = 1'h0;
      endcase
    end
    if (\$41 ) begin
      \$80  = 1'h1;
    end
    if (rst) begin
      \$80  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$81  = mem_address;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  \$81  = \$26 [31:0];
            endcase
        7'h23:
            casez (memorystage)
              1'h0:
                  \$81  = \$30 [31:0];
            endcase
      endcase
    end
    if (rst) begin
      \$81  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$82  = memorystage;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            casez (memorystage)
              1'h0:
                  \$82  = 1'h1;
            endcase
        7'h23:
            casez (memorystage)
              1'h0:
                  \$82  = 1'h1;
            endcase
      endcase
    end
    if (rst) begin
      \$82  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$83  = mem_register;
    if (active) begin
      casez (instruction_cache[6:0])
        7'h63:
            /* empty */;
        7'h03:
            /* empty */;
        7'h23:
            casez (memorystage)
              1'h0:
                  casez (instruction_cache[14:12])
                    3'h2:
                        \$83  = \$31 ;
                  endcase
            endcase
      endcase
    end
    if (rst) begin
      \$83  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$84  = instruction_cache;
    if (\$41 ) begin
      \$84  = instruction_fetch;
    end
    if (rst) begin
      \$84  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$85  = mpu_en;
    if (\$41 ) begin
      \$85  = 1'h0;
    end
    if (rst) begin
      \$85  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$3  = 32'd0;
    casez (\$2 )
      33'h000000000:
          \$3  = r00;
      33'h000000001:
          \$3  = r01;
      33'h000000002:
          \$3  = r02;
      33'h000000003:
          \$3  = r03;
      33'h000000004:
          \$3  = r04;
      33'h000000005:
          \$3  = r05;
      33'h000000006:
          \$3  = r06;
      33'h000000007:
          \$3  = r07;
      33'h000000008:
          \$3  = r08;
      33'h000000009:
          \$3  = r09;
      33'h00000000a:
          \$3  = r0A;
      33'h00000000b:
          \$3  = r0B;
      33'h00000000c:
          \$3  = r0C;
      33'h00000000d:
          \$3  = r0D;
      33'h00000000e:
          \$3  = r0E;
      33'h00000000f:
          \$3  = r0F;
      33'h000000010:
          \$3  = r10;
      33'h000000011:
          \$3  = r11;
      33'h000000012:
          \$3  = r12;
      33'h000000013:
          \$3  = r13;
      33'h000000014:
          \$3  = r14;
      33'h000000015:
          \$3  = r15;
      33'h000000016:
          \$3  = r16;
      33'h000000017:
          \$3  = r17;
      33'h000000018:
          \$3  = r18;
      33'h000000019:
          \$3  = r19;
      33'h00000001a:
          \$3  = r1A;
      33'h00000001b:
          \$3  = r1B;
      33'h00000001c:
          \$3  = r1C;
      33'h00000001d:
          \$3  = r1D;
      33'h00000001e:
          \$3  = r1E;
      33'h00000001f:
          \$3  = r1F;
    endcase
  end
  assign program_counter = prog_addr;
  assign branch_offset = \$10 [12:0];
  assign branch_next = \$12 [31:0];
  assign opcode = instruction_fetch[6:0];
  assign opcode_cache = instruction_cache[6:0];
  assign prog_r_data = instruction_fetch;
  assign bus_ack = 1'h0;
  assign bus_r_data = 32'd0;
  assign \instruction_fetch.op  = instruction_fetch[6:0];
  assign \instruction_fetch.r  = instruction_fetch;
  assign \instruction_fetch.r.op  = instruction_fetch[6:0];
  assign \instruction_fetch.r.rd  = instruction_fetch[11:7];
  assign \instruction_fetch.r.f_lower  = instruction_fetch[14:12];
  assign \instruction_fetch.r.rs1  = instruction_fetch[19:15];
  assign \instruction_fetch.r.rs2  = instruction_fetch[24:20];
  assign \instruction_fetch.r.f_upper  = instruction_fetch[31:25];
  assign \instruction_fetch.i  = instruction_fetch;
  assign \instruction_fetch.i.op  = instruction_fetch[6:0];
  assign \instruction_fetch.i.rd  = instruction_fetch[11:7];
  assign \instruction_fetch.i.f  = instruction_fetch[14:12];
  assign \instruction_fetch.i.rs  = instruction_fetch[19:15];
  assign \instruction_fetch.i.imm  = instruction_fetch[31:20];
  assign \instruction_fetch.u  = instruction_fetch;
  assign \instruction_fetch.u.op  = instruction_fetch[6:0];
  assign \instruction_fetch.u.rd  = instruction_fetch[11:7];
  assign \instruction_fetch.u.imm  = instruction_fetch[31:12];
  assign \instruction_fetch.s  = instruction_fetch;
  assign \instruction_fetch.s.op  = instruction_fetch[6:0];
  assign \instruction_fetch.s.imm_lower  = instruction_fetch[11:7];
  assign \instruction_fetch.s.f  = instruction_fetch[14:12];
  assign \instruction_fetch.s.rs1  = instruction_fetch[19:15];
  assign \instruction_fetch.s.rs2  = instruction_fetch[24:20];
  assign \instruction_fetch.s.imm_upper  = instruction_fetch[31:25];
  assign \instruction_fetch.j  = instruction_fetch;
  assign \instruction_fetch.j.op  = instruction_fetch[6:0];
  assign \instruction_fetch.j.rd  = instruction_fetch[11:7];
  assign \instruction_fetch.j.offset  = instruction_fetch[31:12];
  assign \instruction_fetch.b  = instruction_fetch;
  assign \instruction_fetch.b.op  = instruction_fetch[6:0];
  assign \instruction_fetch.b.offset_lower  = instruction_fetch[11:7];
  assign \instruction_fetch.b.f  = instruction_fetch[14:12];
  assign \instruction_fetch.b.rs1  = instruction_fetch[19:15];
  assign \instruction_fetch.b.rs2  = instruction_fetch[24:20];
  assign \instruction_fetch.b.offset_upper  = instruction_fetch[31:25];
  assign \instruction_fetch.m  = instruction_fetch;
  assign \instruction_fetch.m.op  = instruction_fetch[6:0];
  assign \instruction_fetch.m.rd  = instruction_fetch[11:7];
  assign \instruction_fetch.m.f  = instruction_fetch[14:12];
  assign \instruction_fetch.m.rs1  = instruction_fetch[19:15];
  assign \instruction_fetch.m.rs2  = instruction_fetch[24:20];
  assign \instruction_fetch.m.muldiv  = instruction_fetch[31:25];
  assign \instruction_cache.op  = instruction_cache[6:0];
  assign \instruction_cache.r  = instruction_cache;
  assign \instruction_cache.r.op  = instruction_cache[6:0];
  assign \instruction_cache.r.rd  = instruction_cache[11:7];
  assign \instruction_cache.r.f_lower  = instruction_cache[14:12];
  assign \instruction_cache.r.rs1  = instruction_cache[19:15];
  assign \instruction_cache.r.rs2  = instruction_cache[24:20];
  assign \instruction_cache.r.f_upper  = instruction_cache[31:25];
  assign \instruction_cache.i  = instruction_cache;
  assign \instruction_cache.i.op  = instruction_cache[6:0];
  assign \instruction_cache.i.rd  = instruction_cache[11:7];
  assign \instruction_cache.i.f  = instruction_cache[14:12];
  assign \instruction_cache.i.rs  = instruction_cache[19:15];
  assign \instruction_cache.i.imm  = instruction_cache[31:20];
  assign \instruction_cache.u  = instruction_cache;
  assign \instruction_cache.u.op  = instruction_cache[6:0];
  assign \instruction_cache.u.rd  = instruction_cache[11:7];
  assign \instruction_cache.u.imm  = instruction_cache[31:12];
  assign \instruction_cache.s  = instruction_cache;
  assign \instruction_cache.s.op  = instruction_cache[6:0];
  assign \instruction_cache.s.imm_lower  = instruction_cache[11:7];
  assign \instruction_cache.s.f  = instruction_cache[14:12];
  assign \instruction_cache.s.rs1  = instruction_cache[19:15];
  assign \instruction_cache.s.rs2  = instruction_cache[24:20];
  assign \instruction_cache.s.imm_upper  = instruction_cache[31:25];
  assign \instruction_cache.j  = instruction_cache;
  assign \instruction_cache.j.op  = instruction_cache[6:0];
  assign \instruction_cache.j.rd  = instruction_cache[11:7];
  assign \instruction_cache.j.offset  = instruction_cache[31:12];
  assign \instruction_cache.b  = instruction_cache;
  assign \instruction_cache.b.op  = instruction_cache[6:0];
  assign \instruction_cache.b.offset_lower  = instruction_cache[11:7];
  assign \instruction_cache.b.f  = instruction_cache[14:12];
  assign \instruction_cache.b.rs1  = instruction_cache[19:15];
  assign \instruction_cache.b.rs2  = instruction_cache[24:20];
  assign \instruction_cache.b.offset_upper  = instruction_cache[31:25];
  assign \instruction_cache.m  = instruction_cache;
  assign \instruction_cache.m.op  = instruction_cache[6:0];
  assign \instruction_cache.m.rd  = instruction_cache[11:7];
  assign \instruction_cache.m.f  = instruction_cache[14:12];
  assign \instruction_cache.m.rs1  = instruction_cache[19:15];
  assign \instruction_cache.m.rs2  = instruction_cache[24:20];
  assign \instruction_cache.m.muldiv  = instruction_cache[31:25];
  assign jal_offset[20] = instruction_cache[31];
  assign jal_offset[10:1] = instruction_cache[30:21];
  assign jal_offset[11] = instruction_cache[20];
  assign jal_offset[19:12] = instruction_cache[19:12];
  assign jal_offset[0] = 1'h0;
  assign \$4  = { 4'h0, instruction_cache[7], 11'h000 };
  assign \$5  = { instruction_cache[11:8], 1'h0 };
  assign \$7  = { 2'h0, instruction_cache[30:25], 5'h00 };
  assign \$9  = { 3'h0, instruction_cache[31], 12'h000 };
  assign \$28  = { 2'h0, instruction_cache[31:25], 5'h00 };
  assign \$32  = { instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31:12], 12'h000 };
  assign \$34  = { instruction_cache[31], instruction_cache[31], instruction_cache[31], instruction_cache[31:12], 12'h000 };
  assign \$39 [0] = 1'h0;
  assign \$39 [32:1] = \$38 [32:1];
endmodule

(* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:20" *)
(* generator = "Amaranth" *)
module \risc_project.prog_to_axi (axi_wready, axi_arready, wish_r_data, axi_rvalid, axi_bvalid, clk, rst, wish_cyc, wish_stb, axi_awvalid, axi_wvalid, axi_arvalid, axi_rready, axi_awaddr, wish_ack, axi_bready, axi_awready);
  reg \$auto$verilog_backend.cc:2352:dump_module$6  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire \$2 ;
  reg \$20 ;
  reg \$21 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:22" *)
  reg address_written = 1'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:115" *)
  wire [31:0] axi_araddr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:114" *)
  input axi_arready;
  wire axi_arready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:113" *)
  output axi_arvalid;
  wire axi_arvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:115" *)
  input [31:0] axi_awaddr;
  wire [31:0] axi_awaddr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:108" *)
  input axi_awready;
  wire axi_awready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:107" *)
  output axi_awvalid;
  wire axi_awvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:120" *)
  output axi_bready;
  reg axi_bready = 1'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:121" *)
  input axi_bvalid;
  wire axi_bvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:116" *)
  wire [31:0] axi_rdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:118" *)
  output axi_rready;
  wire axi_rready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:117" *)
  input axi_rvalid;
  wire axi_rvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:110" *)
  wire [31:0] axi_wdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:112" *)
  input axi_wready;
  wire axi_wready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:111" *)
  output axi_wvalid;
  wire axi_wvalid;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:10" *)
  output wish_ack;
  wire wish_ack;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:9" *)
  wire [31:0] wish_addr;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:7" *)
  input wish_cyc;
  wire wish_cyc;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:116" *)
  input [31:0] wish_r_data;
  wire [31:0] wish_r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:8" *)
  input wish_stb;
  wire wish_stb;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:12" *)
  wire [31:0] wish_w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:11" *)
  wire wish_w_en;
  assign \$3  = ~ (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:32" *) address_written;
  assign \$8  = \$7  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:36" *) wish_cyc;
  assign \$9  = ~ (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:36" *) address_written;
  assign axi_arvalid = \$8  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:36" *) \$9 ;
  assign \$12  = \$11  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:37" *) wish_cyc;
  assign axi_rready = \$12  & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:37" *) address_written;
  assign \$14  = axi_rready & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:45" *) axi_rvalid;
  assign \$16  = axi_arvalid & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:51" *) axi_arready;
  assign \$17  = axi_rvalid & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:55" *) axi_rready;
  assign \$19  = axi_bready & (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:62" *) axi_bvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\axi\\wish_to_axi.py:22" *)
  always @(posedge clk)
    address_written <= \$20 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:120" *)
  always @(posedge clk)
    axi_bready <= \$21 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    \$20  = address_written;
    if (\$15 ) begin
      \$20  = 1'h1;
    end
    if (\$16 ) begin
      \$20  = 1'h1;
    end
    if (\$17 ) begin
      \$20  = 1'h0;
    end
    if (\$19 ) begin
      \$20  = 1'h0;
    end
    if (rst) begin
      \$20  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    \$21  = axi_bready;
    if (\$18 ) begin
      \$21  = 1'h1;
    end
    if (\$19 ) begin
      \$21  = 1'h0;
    end
    if (rst) begin
      \$21  = 1'h0;
    end
  end
  assign wish_addr = axi_awaddr;
  assign axi_araddr = axi_awaddr;
  assign axi_wdata = 32'd0;
  assign wish_w_data = 32'd0;
  assign axi_rdata = wish_r_data;
  assign wish_w_en = 1'h0;
  assign wish_ack = \$14 ;
  assign \$1  = 1'h0;
  assign \$2  = 1'h0;
  assign axi_awvalid = 1'h0;
  assign \$4  = 1'h0;
  assign \$5  = 1'h0;
  assign axi_wvalid = 1'h0;
  assign \$6  = 1'h1;
  assign \$7  = wish_stb;
  assign \$10  = 1'h1;
  assign \$11  = wish_stb;
  assign \$13  = 1'h0;
  assign \$15  = 1'h0;
  assign \$18  = 1'h0;
endmodule

(* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:109" *)
(* generator = "Amaranth" *)
module \risc_project.uart_rx (clk, rst, produce_tvalid, produce_tdata, r_en, rx);
  reg \$auto$verilog_backend.cc:2352:dump_module$7  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire [7:0] \$14 ;
  wire [7:0] \$15 ;
  wire [8:0] \$16 ;
  wire \$17 ;
  wire [3:0] \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire [3:0] \$22 ;
  reg [9:0] \$23 ;
  reg [2:0] \$24 ;
  reg [2:0] \$25 ;
  reg [7:0] \$26 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire [10:0] \$9 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:124" *)
  reg [2:0] bit_counter = 3'h0;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:119" *)
  reg [9:0] counter = 10'h000;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:125" *)
  reg [7:0] data_register = 8'h00;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64_qbz5n2kfra8p0\\Lib\\contextlib.py:144" *)
  reg [2:0] fsm_state = 3'h0;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:92" *)
  output [7:0] produce_tdata;
  wire [7:0] produce_tdata;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:86" *)
  wire produce_tready;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:93" *)
  output produce_tvalid;
  wire produce_tvalid;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:92" *)
  wire [7:0] r_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:86" *)
  input r_en;
  wire r_en;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:93" *)
  wire r_rdy;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:105" *)
  input rx;
  wire rx;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:87" *)
  reg [7:0] w_data;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:89" *)
  reg w_en;
  assign \$1  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:160" *) counter;
  assign \$2  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:161" *) bit_counter;
  assign \$3  = ! (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) fsm_state;
  assign \$4  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 1'h1;
  assign \$5  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 2'h2;
  assign \$6  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 2'h3;
  assign \$7  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 3'h4;
  assign \$8  = counter > (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:121" *) 1'h0;
  assign \$9  = counter - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:122" *) 1'h1;
  assign \$10  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:129" *) rx;
  assign \$11  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:134" *) counter;
  assign \$13  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:143" *) counter;
  assign \$16  = \$14  + (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:144" *) \$15 ;
  assign \$17  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:146" *) bit_counter;
  assign \$18  = bit_counter - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:153" *) 1'h1;
  assign \$19  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:155" *) counter;
  assign \$20  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:160" *) counter;
  assign \$21  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:161" *) bit_counter;
  assign \$22  = bit_counter - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:167" *) 1'h1;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:119" *)
  always @(posedge clk)
    counter <= \$23 ;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64_qbz5n2kfra8p0\\Lib\\contextlib.py:144" *)
  always @(posedge clk)
    fsm_state <= \$24 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:124" *)
  always @(posedge clk)
    bit_counter <= \$25 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:125" *)
  always @(posedge clk)
    data_register <= \$26 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:111" *)
  \risc_project.uart_rx.buffer  buffer (
    .clk(clk),
    .r_data(produce_tdata),
    .r_en(r_en),
    .r_rdy(produce_tvalid),
    .rst(rst),
    .w_en(w_en),
    .w_port_data(w_data)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    w_data = 8'h00;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h3:
          if (\$1 ) begin
            if (\$2 ) begin
              w_data = data_register;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    w_en = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h4:
          /* empty */;
      3'h3:
          if (\$1 ) begin
            if (\$2 ) begin
              w_en = 1'h1;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$23  = counter;
    if (\$8 ) begin
      \$23  = \$9 [9:0];
    end
    casez (fsm_state)
      3'h0:
          if (\$10 ) begin
            \$23  = 10'h1b2;
          end
      3'h1:
          if (\$11 ) begin
            (* full_case = 32'd1 *)
            if (\$12 ) begin
            end else begin
              \$23  = 10'h363;
            end
          end
      3'h2:
          if (\$13 ) begin
            \$23  = 10'h363;
          end
      3'h4:
          if (\$19 ) begin
            \$23  = 10'h363;
          end
      3'h3:
          if (\$20 ) begin
            (* full_case = 32'd1 *)
            if (\$21 ) begin
            end else begin
              \$23  = 10'h363;
            end
          end
    endcase
    if (rst) begin
      \$23  = 10'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$24  = fsm_state;
    casez (fsm_state)
      3'h0:
          if (\$10 ) begin
            \$24  = 3'h1;
          end
      3'h1:
          if (\$11 ) begin
            (* full_case = 32'd1 *)
            if (\$12 ) begin
              \$24  = 3'h0;
            end else begin
              \$24  = 3'h2;
            end
          end
      3'h2:
          if (\$13 ) begin
            if (\$17 ) begin
              \$24  = 3'h3;
            end
          end
      3'h4:
          if (\$19 ) begin
            \$24  = 3'h3;
          end
      3'h3:
          if (\$20 ) begin
            if (\$21 ) begin
              \$24  = 3'h0;
            end
          end
    endcase
    if (rst) begin
      \$24  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$25  = bit_counter;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          if (\$11 ) begin
            (* full_case = 32'd1 *)
            if (\$12 ) begin
            end else begin
              \$25  = 3'h7;
            end
          end
      3'h2:
          if (\$13 ) begin
            (* full_case = 32'd1 *)
            if (\$17 ) begin
              \$25  = 3'h0;
            end else begin
              \$25  = \$18 [2:0];
            end
          end
      3'h4:
          if (\$19 ) begin
            \$25  = 3'h0;
          end
      3'h3:
          if (\$20 ) begin
            (* full_case = 32'd1 *)
            if (\$21 ) begin
            end else begin
              \$25  = \$22 [2:0];
            end
          end
    endcase
    if (rst) begin
      \$25  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$26  = data_register;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          if (\$13 ) begin
            \$26  = \$16 [7:0];
          end
    endcase
    if (rst) begin
      \$26  = 8'h00;
    end
  end
  assign r_data = produce_tdata;
  assign r_rdy = produce_tvalid;
  assign produce_tready = r_en;
  assign \$12  = rx;
  assign \$14  = { 1'h0, data_register[7:1] };
  assign \$15  = { rx, 7'h00 };
endmodule

(* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:144" *)
(* generator = "Amaranth" *)
module \risc_project.uart_rx.buffer (rst, r_rdy, r_data, w_port_data, w_en, r_en, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$8  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire [3:0] \$14 ;
  reg [1:0] \$15 ;
  reg [1:0] \$16 ;
  reg [2:0] \$17 ;
  wire [2:0] \$2 ;
  wire \$3 ;
  wire [2:0] \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire [3:0] \$9 ;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* init = 2'h0 *)
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:166" *)
  wire [1:0] consume;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:141" *)
  reg [2:0] level = 3'h0;
  (* init = 2'h0 *)
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:165" *)
  wire [1:0] produce;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\memory.py:241" *)
  output [7:0] r_data;
  wire [7:0] r_data;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:94" *)
  input r_en;
  wire r_en;
  (* init = 3'h0 *)
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:95" *)
  wire [2:0] r_level;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\memory.py:240" *)
  reg [1:0] r_port_addr = 2'h0;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\memory.py:241" *)
  wire [7:0] r_port_data;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:93" *)
  output r_rdy;
  wire r_rdy;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:87" *)
  wire [7:0] w_data;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:89" *)
  input w_en;
  wire w_en;
  (* init = 3'h0 *)
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:90" *)
  wire [2:0] w_level;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\memory.py:401" *)
  reg [1:0] w_port_addr = 2'h0;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:87" *)
  input [7:0] w_port_data;
  wire [7:0] w_port_data;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\memory.py:400" *)
  wire w_port_en;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:88" *)
  wire w_rdy;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:162" *)
  reg [7:0] storage [3:0];
  initial begin
    storage[0] = 8'h00;
    storage[1] = 8'h00;
    storage[2] = 8'h00;
    storage[3] = 8'h00;
  end
  always @(posedge clk) begin
    if (w_port_en)
      storage[w_port_addr] <= w_port_data;
  end
  assign r_data = storage[r_port_addr];
  assign w_rdy = level != (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:153" *) 3'h4;
  assign r_rdy = | (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:154" *) level;
  assign w_port_en = w_en & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:171" *) w_rdy;
  assign \$1  = w_rdy & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:160" *) w_en;
  assign \$2  = w_port_addr + (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:116" *) 1'h1;
  assign \$3  = r_rdy & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:159" *) r_en;
  assign \$4  = r_port_addr + (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:116" *) 1'h1;
  assign \$5  = w_rdy & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:160" *) w_en;
  assign \$6  = r_rdy & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:159" *) r_en;
  assign \$7  = ~ (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:183" *) \$6 ;
  assign \$8  = \$5  & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:183" *) \$7 ;
  assign \$9  = level + (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:184" *) 1'h1;
  assign \$10  = r_rdy & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:159" *) r_en;
  assign \$11  = w_rdy & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:160" *) w_en;
  assign \$12  = ~ (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:185" *) \$11 ;
  assign \$13  = \$10  & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:185" *) \$12 ;
  assign \$14  = level - (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:186" *) 1'h1;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:165" *)
  always @(posedge clk)
    w_port_addr <= \$15 ;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:166" *)
  always @(posedge clk)
    r_port_addr <= \$16 ;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:141" *)
  always @(posedge clk)
    level <= \$17 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$15  = w_port_addr;
    if (\$1 ) begin
      \$15  = \$2 [1:0];
    end
    if (rst) begin
      \$15  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$16  = r_port_addr;
    if (\$3 ) begin
      \$16  = \$4 [1:0];
    end
    if (rst) begin
      \$16  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$17  = level;
    if (\$8 ) begin
      \$17  = \$9 [2:0];
    end
    if (\$13 ) begin
      \$17  = \$14 [2:0];
    end
    if (rst) begin
      \$17  = 3'h0;
    end
  end
  assign w_level = level;
  assign r_level = level;
  assign produce = w_port_addr;
  assign w_data = w_port_data;
  assign consume = r_port_addr;
  assign r_port_data = r_data;
endmodule

(* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:22" *)
(* generator = "Amaranth" *)
module \risc_project.uart_tx (rst, consume_tready, tx, w_en, w_data, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$9  = 0;
  wire \$1 ;
  wire [7:0] \$10 ;
  wire \$11 ;
  wire [3:0] \$12 ;
  wire [10:0] \$13 ;
  wire \$14 ;
  wire [10:0] \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire [3:0] \$18 ;
  wire [10:0] \$19 ;
  wire \$2 ;
  reg [7:0] \$20 ;
  reg [9:0] \$21 ;
  reg [2:0] \$22 ;
  reg [2:0] \$23 ;
  reg \$24 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire [10:0] \$7 ;
  wire \$8 ;
  wire [1:0] \$9 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:36" *)
  reg [2:0] byte_counter = 3'h0;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:84" *)
  wire [7:0] consume_tdata;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:88" *)
  output consume_tready;
  wire consume_tready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:85" *)
  wire consume_tvalid;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:35" *)
  reg [9:0] counter = 10'h000;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:32" *)
  reg [7:0] data_register = 8'h00;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64_qbz5n2kfra8p0\\Lib\\contextlib.py:144" *)
  reg [2:0] fsm_state = 3'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:33" *)
  reg parity = 1'h0;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:92" *)
  wire [7:0] r_data;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:94" *)
  reg r_en;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:93" *)
  wire r_rdy;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:18" *)
  output tx;
  reg tx;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:84" *)
  input [7:0] w_data;
  wire [7:0] w_data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\infra\\signature.py:85" *)
  input w_en;
  wire w_en;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:88" *)
  wire w_rdy;
  assign \$1  = ! (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) fsm_state;
  assign \$2  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 1'h1;
  assign \$3  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 2'h2;
  assign \$4  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 2'h3;
  assign \$5  = fsm_state == (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) 3'h4;
  assign \$6  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:50" *) counter;
  assign \$7  = counter - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:55" *) 1'h1;
  assign \$8  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:59" *) counter;
  assign \$9  = parity + (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:60" *) data_register[0];
  assign \$11  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:63" *) byte_counter;
  assign \$12  = byte_counter - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:70" *) 1'h1;
  assign \$13  = counter - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:72" *) 1'h1;
  assign \$14  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:76" *) counter;
  assign \$15  = counter - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:82" *) 1'h1;
  assign \$16  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:86" *) counter;
  assign \$17  = ! (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:87" *) byte_counter;
  assign \$18  = byte_counter - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:90" *) 1'h1;
  assign \$19  = counter - (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:93" *) 1'h1;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:32" *)
  always @(posedge clk)
    data_register <= \$20 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:35" *)
  always @(posedge clk)
    counter <= \$21 ;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64_qbz5n2kfra8p0\\Lib\\contextlib.py:144" *)
  always @(posedge clk)
    fsm_state <= \$22 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:36" *)
  always @(posedge clk)
    byte_counter <= \$23 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:33" *)
  always @(posedge clk)
    parity <= \$24 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\audio_fpga\\sapf\\ser\\uart.py:24" *)
  \risc_project.uart_tx.buffer  buffer (
    .clk(clk),
    .r_data(r_data),
    .r_en(r_en),
    .r_rdy(r_rdy),
    .rst(rst),
    .w_en(w_en),
    .w_port_data(w_data),
    .w_rdy(consume_tready)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    tx = 1'h0;
    casez (fsm_state)
      3'h0:
          tx = 1'h1;
      3'h1:
          tx = 1'h0;
      3'h2:
          tx = data_register[0];
      3'h4:
          tx = parity;
      3'h3:
          tx = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    r_en = 1'h0;
    casez (fsm_state)
      3'h0:
          if (r_rdy) begin
            r_en = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$20  = data_register;
    casez (fsm_state)
      3'h0:
          if (r_rdy) begin
            \$20  = r_data;
          end
      3'h1:
          /* empty */;
      3'h2:
          if (\$8 ) begin
            \$20  = \$10 ;
          end
    endcase
    if (rst) begin
      \$20  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$21  = counter;
    casez (fsm_state)
      3'h0:
          if (r_rdy) begin
            \$21  = 10'h363;
          end
      3'h1:
          (* full_case = 32'd1 *)
          if (\$6 ) begin
            \$21  = 10'h363;
          end else begin
            \$21  = \$7 [9:0];
          end
      3'h2:
          (* full_case = 32'd1 *)
          if (\$8 ) begin
            \$21  = 10'h363;
          end else begin
            \$21  = \$13 [9:0];
          end
      3'h4:
          (* full_case = 32'd1 *)
          if (\$14 ) begin
            \$21  = 10'h363;
          end else begin
            \$21  = \$15 [9:0];
          end
      3'h3:
          (* full_case = 32'd1 *)
          if (\$16 ) begin
            (* full_case = 32'd1 *)
            if (\$17 ) begin
            end else begin
              \$21  = 10'h363;
            end
          end else begin
            \$21  = \$19 [9:0];
          end
    endcase
    if (rst) begin
      \$21  = 10'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$22  = fsm_state;
    casez (fsm_state)
      3'h0:
          if (r_rdy) begin
            \$22  = 3'h1;
          end
      3'h1:
          if (\$6 ) begin
            \$22  = 3'h2;
          end
      3'h2:
          if (\$8 ) begin
            if (\$11 ) begin
              \$22  = 3'h3;
            end
          end
      3'h4:
          if (\$14 ) begin
            \$22  = 3'h3;
          end
      3'h3:
          if (\$16 ) begin
            if (\$17 ) begin
              \$22  = 3'h0;
            end
          end
    endcase
    if (rst) begin
      \$22  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$23  = byte_counter;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          if (\$6 ) begin
            \$23  = 3'h7;
          end
      3'h2:
          if (\$8 ) begin
            (* full_case = 32'd1 *)
            if (\$11 ) begin
              \$23  = 3'h1;
            end else begin
              \$23  = \$12 [2:0];
            end
          end
      3'h4:
          if (\$14 ) begin
            \$23  = 3'h1;
          end
      3'h3:
          if (\$16 ) begin
            (* full_case = 32'd1 *)
            if (\$17 ) begin
            end else begin
              \$23  = \$18 [2:0];
            end
          end
    endcase
    if (rst) begin
      \$23  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$24  = parity;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          if (\$8 ) begin
            \$24  = \$9 [0];
          end
      3'h4:
          if (\$14 ) begin
            \$24  = 1'h0;
          end
    endcase
    if (rst) begin
      \$24  = 1'h0;
    end
  end
  assign consume_tvalid = w_en;
  assign consume_tdata = w_data;
  assign w_rdy = consume_tready;
  assign \$10  = { 1'h0, data_register[7:1] };
endmodule

(* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:144" *)
(* generator = "Amaranth" *)
module \risc_project.uart_tx.buffer (rst, w_rdy, r_rdy, r_data, r_en, w_en, w_port_data, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$10  = 0;
  wire \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire [3:0] \$14 ;
  reg [1:0] \$15 ;
  reg [1:0] \$16 ;
  reg [2:0] \$17 ;
  wire [2:0] \$2 ;
  wire \$3 ;
  wire [2:0] \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire [3:0] \$9 ;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* init = 2'h0 *)
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:166" *)
  wire [1:0] consume;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:141" *)
  reg [2:0] level = 3'h0;
  (* init = 2'h0 *)
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:165" *)
  wire [1:0] produce;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\memory.py:241" *)
  output [7:0] r_data;
  wire [7:0] r_data;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:94" *)
  input r_en;
  wire r_en;
  (* init = 3'h0 *)
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:95" *)
  wire [2:0] r_level;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\memory.py:240" *)
  reg [1:0] r_port_addr = 2'h0;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\memory.py:241" *)
  wire [7:0] r_port_data;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:93" *)
  output r_rdy;
  wire r_rdy;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:87" *)
  wire [7:0] w_data;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:89" *)
  input w_en;
  wire w_en;
  (* init = 3'h0 *)
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:90" *)
  wire [2:0] w_level;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\memory.py:401" *)
  reg [1:0] w_port_addr = 2'h0;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:87" *)
  input [7:0] w_port_data;
  wire [7:0] w_port_data;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\memory.py:400" *)
  wire w_port_en;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:88" *)
  output w_rdy;
  wire w_rdy;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:162" *)
  reg [7:0] storage [3:0];
  initial begin
    storage[0] = 8'h00;
    storage[1] = 8'h00;
    storage[2] = 8'h00;
    storage[3] = 8'h00;
  end
  always @(posedge clk) begin
    if (w_port_en)
      storage[w_port_addr] <= w_port_data;
  end
  assign r_data = storage[r_port_addr];
  assign w_rdy = level != (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:153" *) 3'h4;
  assign r_rdy = | (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:154" *) level;
  assign w_port_en = w_en & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:171" *) w_rdy;
  assign \$1  = w_rdy & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:160" *) w_en;
  assign \$2  = w_port_addr + (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:116" *) 1'h1;
  assign \$3  = r_rdy & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:159" *) r_en;
  assign \$4  = r_port_addr + (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:116" *) 1'h1;
  assign \$5  = w_rdy & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:160" *) w_en;
  assign \$6  = r_rdy & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:159" *) r_en;
  assign \$7  = ~ (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:183" *) \$6 ;
  assign \$8  = \$5  & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:183" *) \$7 ;
  assign \$9  = level + (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:184" *) 1'h1;
  assign \$10  = r_rdy & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:159" *) r_en;
  assign \$11  = w_rdy & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:160" *) w_en;
  assign \$12  = ~ (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:185" *) \$11 ;
  assign \$13  = \$10  & (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:185" *) \$12 ;
  assign \$14  = level - (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:186" *) 1'h1;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:165" *)
  always @(posedge clk)
    w_port_addr <= \$15 ;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:166" *)
  always @(posedge clk)
    r_port_addr <= \$16 ;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\fifo.py:141" *)
  always @(posedge clk)
    level <= \$17 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$15  = w_port_addr;
    if (\$1 ) begin
      \$15  = \$2 [1:0];
    end
    if (rst) begin
      \$15  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$16  = r_port_addr;
    if (\$3 ) begin
      \$16  = \$4 [1:0];
    end
    if (rst) begin
      \$16  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$17  = level;
    if (\$8 ) begin
      \$17  = \$9 [2:0];
    end
    if (\$13 ) begin
      \$17  = \$14 [2:0];
    end
    if (rst) begin
      \$17  = 3'h0;
    end
  end
  assign w_level = level;
  assign r_level = level;
  assign produce = w_port_addr;
  assign w_data = w_port_data;
  assign consume = r_port_addr;
  assign r_port_data = r_data;
endmodule
